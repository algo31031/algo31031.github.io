<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[老男孩的整理箱]]></title>
  <link href="http://blog.banban.me/blog/atom.xml" rel="self"/>
  <link href="http://blog.banban.me/blog/"/>
  <updated>2015-09-27T16:13:41+08:00</updated>
  <id>http://blog.banban.me/blog/</id>
  <author>
    <name><![CDATA[banban]]></name>
    <email><![CDATA[algo31031@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mac上搭建Phonegap环境]]></title>
    <link href="http://blog.banban.me/blog/blog/2014/10/02/macshang-da-jian-phonegaphuan-jing/"/>
    <updated>2014-10-02T11:36:33+08:00</updated>
    <id>http://blog.banban.me/blog/blog/2014/10/02/macshang-da-jian-phonegaphuan-jing</id>
    <content type="html"><![CDATA[<p>话说好久没有更新Blog了。八九两个月各种事情，工作也是一换再换。现在终于能够以远程的形式重新加入一家创业公司，为心理咨询的事业奋斗。公司给配了台Macbook Pro，近期要开始着力移动端的开发，简单粗暴的phonegap第一版已经发布了，我这边也需要尽快对安卓、iOS开发熟悉下。先从phonegap入手吧。</p>

<h3>Node.js</h3>

<p>phonegap是一个node.s的程序，所以需要先安装node.js。
安法也很简单，到其官网首页，点&#8217;INSTALL&#8217;下载其预编译好的安装包，直接装就行。
装完会说明安装位置并提示需要<code>/usr/local/bin</code>在path里。可以用<code>echo $PATH</code>查看</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Node was installed at
</span><span class='line'>
</span><span class='line'>   /usr/local/bin/node
</span><span class='line'>
</span><span class='line'>npm was installed at
</span><span class='line'>
</span><span class='line'>   /usr/local/bin/npm
</span><span class='line'>
</span><span class='line'>Make sure that /usr/local/bin is in your $PATH.</span></code></pre></td></tr></table></div></figure>


<p>安装成的的话，在控制台键入<code>node -v</code>应该能看到版本信息</p>

<h3>Cordova CLI</h3>

<p><code>sudo npm install -g cordova</code></p>

<h3>Build Android Platform</h3>

<p><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">下载安装jdk 8</a>，执行<code>java -version</code>会有相应版本信息</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>java version "1.8.0_20"
</span><span class='line'>Java(TM) SE Runtime Environment (build 1.8.0_20-b26)
</span><span class='line'>Java HotSpot(TM) 64-Bit Server VM (build 25.20-b23, mixed mode)</span></code></pre></td></tr></table></div></figure>


<p>下载安装 Android SDK, <code>brew install android-sdk</code></p>

<p><a href="http://www.eclipse.org/downloads/">下载 Eclipse</a>, 解压即可用。 启动eclipse，选择<code>Help &gt; Install New Software</code>，输入下面的URL: <code>https://dl-ssl.google.com/android/eclipse/</code>, 安装插件。之后会要求重启Eclipse，设定android-sdk位置,<code>/usr/local/opt/android-sdk</code>。</p>

<p>为了使用 Android 模拟器，还需要安装 Ant。<code>brew install ant</code></p>

<h3>Build iOS Platform</h3>

<p>安装iOS模拟器，<code>sudo npm install -g ios-sim</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails遗留程序里最常犯的错误(译)]]></title>
    <link href="http://blog.banban.me/blog/blog/2014/07/23/railsyi-liu-cheng-xu-li-zui-chang-fan-de-cuo-wu/"/>
    <updated>2014-07-23T13:23:08+08:00</updated>
    <id>http://blog.banban.me/blog/blog/2014/07/23/railsyi-liu-cheng-xu-li-zui-chang-fan-de-cuo-wu</id>
    <content type="html"><![CDATA[<p>原文出自<a href="http://edelpero.svbtle.com/most-common-mistakes-on-legacy-rails-apps">most-common-mistakes-on-legacy-rails-apps</a>, 感谢作者<a href="http://edelpero.svbtle.com/">EZEQUIEL DELPERO</a></p>

<p>近来我一直在对几个遗留项目作维护。</p>

<p>众所周知，处理遗留项目多数时间都感觉糟透了，因为那些代码通常都丑陋不堪而且晦涩难懂。</p>

<p>我决定做一个列表，记录下那些公认的不良实践，或者是我认为不太好的实践，以及如何改良代码来避免这些不良实践。</p>

<h3>问题一览</h3>

<ul>
<li>在模型层以外使用查询方法</li>
<li>在视图层使用业务逻辑</li>
<li>使用无意义的方法名和变量名</li>
<li>条件判断时使用unless或者否定的表达式</li>
<li>没有遵循“命令，不要去询问”原则</li>
<li>使用复杂的条件</li>
<li>在模型的实例方法里，本来不需要的时候使用了“self.”</li>
<li>使用条件表达式并且返回了条件</li>
<li>在视图层使用行内样式</li>
<li>在视图层使用JavaScript</li>
<li>调用方法时把另一个方法的调用作为参数</li>
<li>没有使用类来隔离Rake Tasks</li>
<li>没有遵循Sandi Metz的规则</li>
</ul>


<h3>在模型层以外使用查询方法</h3>

<p><strong>不好的</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/controllers/users_controller.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">UsersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="vi">@users</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">active</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span><span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="ss">:last_login_at</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码不可重用而且难于测试。如果你在别的地方也想查找全部用户并进行排序，就会出现冗余代码。</p>

<p><strong>好的</strong></p>

<p>比起在控制器里使用查询方法，我们的做法是在模型层中使用scope把它们独立出来，就如下例所示。这样做既可以使代码能够复用，又便于代码阅读和测试。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/user.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:active</span><span class="p">,</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">where</span><span class="p">(</span><span class="ss">active</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:by_last_login_at</span><span class="p">,</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">order</span><span class="p">(</span><span class="ss">:lasst_login_at</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/controllers/users_controller.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">UsersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="vi">@users</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">active</span><span class="o">.</span><span class="n">by_last_login_at</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>每当你想用where、order、joins、includes、group、having或者其他查询方法时，记得要把它们放在模型层里。</p>

<h3>在视图层使用业务逻辑</h3>

<p><strong>不好的</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;!--</span> <span class="n">app</span><span class="o">/</span><span class="n">views</span><span class="o">/</span><span class="n">posts</span><span class="o">/</span><span class="n">show</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">erb</span> <span class="o">--&gt;</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">%= &quot;</span><span class="si">#{</span><span class="vi">@comments</span><span class="o">.</span><span class="n">count</span><span class="si">}</span><span class="sx"> Comment</span><span class="si">#{</span><span class="vi">@comments</span><span class="o">.</span><span class="n">count</span> <span class="sx">=</span><span class="o">=</span> <span class="mi">1</span> <span class="o">?</span> <span class="s1">&#39;&#39;</span> <span class="p">:</span> <span class="s1">&#39;s&#39;</span><span class="p">}</span><span class="s2">&quot; %&gt;</span>
</span><span class='line'><span class="s2">&lt;/h2&gt;</span>
</span><span class='line'><span class="s2">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>初看之下这小段代码似乎没什么问题，但是它会让HTML变得有点难以阅读，而且可以肯定的说一旦你在视图层添加了逻辑代码，那么日后你定会添加更多的逻辑到视图。这段代码还有一个问题，里面的逻辑无法复用，而且不能单独测试。</p>

<p><strong>好的</strong></p>

<p>使用Rails的helper方法把业务逻辑隔离出来</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/helpers/comments_helper.rb</span>
</span><span class='line'><span class="k">module</span> <span class="nn">CommentsHelper</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">comments_count</span><span class="p">(</span><span class="n">comments</span><span class="p">)</span>
</span><span class='line'>    <span class="s2">&quot;</span><span class="si">#{</span><span class="n">comments</span><span class="o">.</span><span class="n">count</span><span class="si">}</span><span class="s2"> Comment</span><span class="si">#{</span><span class="n">comments</span><span class="o">.</span><span class="n">count</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="s1">&#39;&#39;</span> <span class="p">:</span> <span class="s1">&#39;s&#39;</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;!--</span> <span class="n">app</span><span class="o">/</span><span class="n">views</span><span class="o">/</span><span class="n">posts</span><span class="o">/</span><span class="n">show</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">erb</span> <span class="o">--&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;%=</span> <span class="n">comments_count</span><span class="p">(</span><span class="vi">@comments</span><span class="p">)</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">&lt;/h2&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>使用无意义的方法名和变量名</h3>

<p><strong>不好的</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/topic.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Topic</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">r_topics</span><span class="p">(</span><span class="n">questions</span><span class="p">)</span>
</span><span class='line'>    <span class="n">rt</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">questions</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">q</span><span class="o">|</span>
</span><span class='line'>      <span class="n">topics</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="n">topics</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">topics</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">t</span><span class="o">.</span><span class="n">enabled?</span>
</span><span class='line'>          <span class="n">rt</span> <span class="o">&lt;&lt;</span> <span class="n">t</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="no">Topic</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="n">rt</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这类遗留代码最主要的问题在于：你需要花费大把时间来搞清楚这些代码的用途。r_topics这个方法是做什么的，rt这个变量又是什么意思。其他的一些变量，比如在代码块里用到的那个，变量名的含义很模糊，这样也使得它们的用途初看起来很难理解。</p>

<p><strong>好的</strong></p>

<p>对方法和变量命名时选那些能表达出其含义的名字。这样更便于其他开发者理解你的代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/topic.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Topic</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">related</span><span class="p">(</span><span class="n">questions</span><span class="p">)</span>
</span><span class='line'>    <span class="n">related_topics</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">questions</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">question</span><span class="o">|</span>
</span><span class='line'>      <span class="n">topics</span> <span class="o">=</span> <span class="n">question</span><span class="o">.</span><span class="n">topics</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">topics</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">topic</span><span class="o">|</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">topic</span><span class="o">.</span><span class="n">enabled?</span>
</span><span class='line'>          <span class="n">related_topics</span> <span class="o">&lt;&lt;</span> <span class="n">topic</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="no">Topic</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="n">related_topics</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样改进的好处在于：</p>

<ul>
<li>第一次看到方法名时就会对方法返回值有个概念。一个与给定问题集合相关联的主题的集合。</li>
<li>现在你能够了解related_topics表示一个数组，它里面存放了一个与给定问题集合相关联的主题的集合。之前打代码里rt表示什么非常含糊。</li>
<li>使用topic代替之前的t，并用question替换掉q，使得你的代码更便于阅读，因为你不再需要脑补这些变量的用途。现在这些代码已然能够自解释一切。</li>
</ul>


<h3>条件判断时使用unless或者否定的表达式</h3>

<p><strong>不好的</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/services/charge_user.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ChargeUser</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">perform</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">amount</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">false</span> <span class="k">unless</span> <span class="n">user</span><span class="o">.</span><span class="n">enabled?</span>
</span><span class='line'>
</span><span class='line'>    <span class="no">PaymentGateway</span><span class="o">.</span><span class="n">charge</span><span class="p">(</span><span class="n">user</span><span class="o">.</span><span class="n">account_id</span><span class="p">,</span> <span class="n">amount</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码也许并不难理解，但是使用unless或者否定的条件表达式会稍微增加代码的发复杂度，因为你必须对它要判断的条件自行脑补。</p>

<p><strong>好的</strong></p>

<p>改用if或者肯定的条件表达式之后，上述代码就会好懂得多。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/user.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">disabled?</span>
</span><span class='line'>    <span class="o">!</span><span class="n">enabled?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/services/charge_user.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ChargeUser</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">perform</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">amount</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">false</span> <span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">disabled?</span>
</span><span class='line'>
</span><span class='line'>    <span class="no">PaymentGateway</span><span class="o">.</span><span class="n">charge</span><span class="p">(</span><span class="n">user</span><span class="o">.</span><span class="n">account_id</span><span class="p">,</span> <span class="n">amount</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>不觉得这样写代码更易读了吗？我更倾向于使用if而非unless，用肯定的表达式多过肯定的表达式。实在不行就添加个反意的方法，比如我们在User模型里加的那个。</p>

<h3>没有遵循“命令，不要去询问”原则</h3>

<p><strong>不好的</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/user.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">enable!</span>
</span><span class='line'>    <span class="n">update</span><span class="p">(</span><span class="ss">enabled</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/controllers/users_controller.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">UsersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">enable</span>
</span><span class='line'>    <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">disabled?</span>
</span><span class='line'>      <span class="n">user</span><span class="o">.</span><span class="n">enable!</span>
</span><span class='line'>      <span class="n">message</span> <span class="o">=</span> <span class="s2">&quot;User enabled&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">message</span> <span class="o">=</span> <span class="s2">&quot;User already disabled&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">redirect_to</span> <span class="n">user_path</span><span class="p">(</span><span class="n">user</span><span class="p">),</span> <span class="ss">notice</span><span class="p">:</span> <span class="n">message</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的问题是在不恰当的地方出现了控制逻辑。你先判断了用户是否是不可用，如果的确不可用，就启用这个用户。</p>

<p><strong>好的</strong></p>

<p>比较好的改办法是把控制逻辑放到enable!方法里。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/user.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">enable!</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">disabled?</span>
</span><span class='line'>      <span class="n">update</span><span class="p">(</span><span class="ss">enabled</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/controllers/users_controller.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">UsersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">enable</span>
</span><span class='line'>    <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">enable!</span>
</span><span class='line'>      <span class="n">message</span> <span class="o">=</span> <span class="s2">&quot;User enabled&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">message</span> <span class="o">=</span> <span class="s2">&quot;User already disabled&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">redirect_to</span> <span class="n">user_path</span><span class="p">(</span><span class="n">user</span><span class="p">),</span> <span class="ss">notice</span><span class="p">:</span> <span class="n">message</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在控制器不用关心user需要满足何种条件才会被启用。相关的判断由User模型和enable！方法来处理。</p>

<h3>使用复杂的条件</h3>

<p><strong>不好的</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/controllers/posts_controller.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">PostsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">destroy</span>
</span><span class='line'>    <span class="n">post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">post</span><span class="o">.</span><span class="n">enabled?</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">user</span><span class="o">.</span><span class="n">own_post?</span><span class="p">(</span><span class="n">post</span><span class="p">)</span> <span class="o">||</span> <span class="n">user</span><span class="o">.</span><span class="n">admin?</span><span class="p">)</span>
</span><span class='line'>      <span class="n">post</span><span class="o">.</span><span class="n">destroy</span>
</span><span class='line'>      <span class="n">message</span> <span class="o">=</span> <span class="s2">&quot;Post destroyed.&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">message</span> <span class="o">=</span> <span class="s2">&quot;You&#39;re not allow to destroy this post.&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">redirect_to</span> <span class="n">posts_path</span><span class="p">,</span> <span class="ss">notice</span><span class="p">:</span> <span class="n">message</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>条件表达式弄的太过复杂了，实际上这里只想知道一件事：用户可以删掉post吗？</p>

<p><strong>好的</strong></p>

<p>从上面的代码我们可以了解到，一个用户需要是post的所有者或者这个用户是管理员，并且post本身也是可用的，才可以删除这个post。最好的做法就是，把这些条件抽取成一个日后可以复用的方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/user.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">can_destroy_post?</span><span class="p">(</span><span class="n">post</span><span class="p">)</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">enabled?</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">own_post?</span><span class="p">(</span><span class="n">post</span><span class="p">)</span> <span class="o">||</span> <span class="n">admin?</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/controllers/posts_controller.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">PostsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">destroy</span>
</span><span class='line'>    <span class="n">post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">can_destroy_post?</span><span class="p">(</span><span class="n">post</span><span class="p">)</span>
</span><span class='line'>      <span class="n">post</span><span class="o">.</span><span class="n">destroy</span>
</span><span class='line'>      <span class="n">message</span> <span class="o">=</span> <span class="s2">&quot;Post destroyed.&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">message</span> <span class="o">=</span> <span class="s2">&quot;You&#39;re not allow to destroy this post.&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">redirect_to</span> <span class="n">posts_path</span><span class="p">,</span> <span class="ss">notice</span><span class="p">:</span> <span class="n">message</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>每当条件表达式里出现了&amp;&amp;或者||，就应该把它们提取为方法，以备以后复用。</p>

<h3>在模型的实例方法里，本来不需要的时候使用了“self.”</h3>

<p><strong>不好的</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/user.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">full_name</span>
</span><span class='line'>    <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">first_name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">last_name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码并不复杂但是里面并不需要使用“self.”。把“self.”去掉会使代码更简洁且不影响可用性。</p>

<p><strong>好的</strong></p>

<p>在模型里，只有在实例方法里需要赋值时，才会用到“self.”，否则通篇的“self.”只会徒增代码复杂度。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/user.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">full_name</span>
</span><span class='line'>    <span class="s2">&quot;</span><span class="si">#{</span><span class="n">first_name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">last_name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>使用条件表达式并且返回了条件</h3>

<p><strong>不好的</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/user.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">full_name</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">name</span>
</span><span class='line'>      <span class="nb">name</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="s2">&quot;No name&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>或者</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/user.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">full_name</span>
</span><span class='line'>    <span class="nb">name</span> <span class="p">?</span> <span class="nb">name</span> <span class="p">:</span> <span class="s2">&quot;No name&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码的问题在于：在不需要的地方添加了控制语句。</p>

<p><strong>好的</strong></p>

<p>有种更简便的处理方式也能达到同样效果</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/user.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">full_name</span>
</span><span class='line'>    <span class="nb">name</span> <span class="o">||</span> <span class="s2">&quot;No name&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>简单来说这段代码会在name不为false或nil时将其返回，否则返回&#8221;No name&#8221;.</p>

<p>使用得当的话，||和&amp;&amp;这些操作符会对提升你的代码品质提供巨大助力。</p>

<h3>在视图层使用行内样式</h3>

<p><strong>不好的</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;!--</span> <span class="n">app</span><span class="o">/</span><span class="n">views</span><span class="o">/</span><span class="n">projects</span><span class="o">/</span><span class="n">show</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">erb</span> <span class="o">--&gt;</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span> <span class="n">style</span><span class="o">=</span><span class="s2">&quot;font-size:20px;letter-spacing:normal;color:#95d60a;line-height:100%;margin:0;font-family:&#39;Proxima Nova&#39;;&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="no">SECRET</span> <span class="no">PROJECT</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/h3&gt;</span>
</span><span class='line'><span class="sr">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里我们只列出一个标签，所有的样式都写在了标签里。现在，请设想一下，如果所有的标签都接收行内样式。这会把你的HTML变得和其难度，除此之外，每当你需要引入另一个同样的h3元素时，将不得不把同样代码照搬一边，造成冗余。</p>

<p><strong>好的</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">//</span> <span class="n">app</span><span class="o">/</span><span class="n">assets</span><span class="o">/</span><span class="n">stylesheets</span><span class="o">/</span><span class="n">application</span><span class="o">.</span><span class="n">css</span>
</span><span class='line'><span class="o">.</span><span class="n">project</span><span class="o">-</span><span class="n">title</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">font</span><span class="o">-</span><span class="ss">size</span><span class="p">:</span> <span class="mi">20</span><span class="n">px</span><span class="p">;</span>
</span><span class='line'>    <span class="n">letter</span><span class="o">-</span><span class="ss">spacing</span><span class="p">:</span> <span class="n">normal</span><span class="p">;</span>
</span><span class='line'>    <span class="ss">color</span><span class="p">:</span> <span class="c1">#95d60a; </span>
</span><span class='line'>    <span class="n">line</span><span class="o">-</span><span class="ss">height</span><span class="p">:</span> <span class="mi">100</span><span class="sx">%;</span>
</span><span class='line'><span class="sx">    margin: 0;</span>
</span><span class='line'>    <span class="n">font</span><span class="o">-</span><span class="ss">family</span><span class="p">:</span><span class="s1">&#39;Proxima Nova&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;!--</span> <span class="n">app</span><span class="o">/</span><span class="n">views</span><span class="o">/</span><span class="n">projects</span><span class="o">/</span><span class="n">show</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">erb</span> <span class="o">--&gt;</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">h3</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;project-title&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="no">SECRET</span> <span class="no">PROJECT</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/h3&gt;</span>
</span><span class='line'><span class="sr">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在我么可以复用样式了，并且HTML的可读性也有所提高。</p>

<p><strong>注意：</strong>这只是个简单的范例，实际应用时你应该把CSS拆分成多个小文件，并通过application.css来加载这些文件。另外只有在email模板里，才会用到行内样式。</p>

<h3>在视图层使用JavaScript</h3>

<p><strong>不好的</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;!--</span> <span class="n">app</span><span class="o">/</span><span class="n">views</span><span class="o">/</span><span class="n">questions</span><span class="o">/</span><span class="n">show</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">erb</span> <span class="o">--&gt;</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">textarea</span> <span class="n">rows</span><span class="o">=</span><span class="s2">&quot;4&quot;</span> <span class="n">cols</span><span class="o">=</span><span class="s2">&quot;50&quot;</span> <span class="n">class</span><span class="o">=</span><span class="s1">&#39;wysihtml5&#39;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="no">Insert</span> <span class="n">your</span> <span class="n">question</span> <span class="n">details</span> <span class="n">here</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/textarea&gt;</span>
</span><span class='line'><span class="sr">...</span>
</span><span class='line'><span class="sr">&lt;script&gt;</span>
</span><span class='line'><span class="sr">  $(document).ready(function(){</span>
</span><span class='line'><span class="sr">  $(&#39;textarea.wysihtml5&#39;).wysihtml5({</span>
</span><span class='line'><span class="sr">    &quot;font-styles&quot;: true, /</span><span class="o">/</span><span class="no">Font</span> <span class="n">styling</span><span class="p">,</span> <span class="n">e</span><span class="o">.</span><span class="n">g</span><span class="o">.</span> <span class="n">h1</span><span class="p">,</span> <span class="n">h2</span><span class="p">,</span> <span class="n">etc</span><span class="o">.</span> <span class="no">Default</span> <span class="kp">true</span><span class="o">.</span>
</span><span class='line'>    <span class="s2">&quot;emphasis&quot;</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="sr">//</span><span class="no">Italics</span><span class="p">,</span> <span class="n">bold</span><span class="p">,</span> <span class="n">etc</span><span class="o">.</span> <span class="no">Default</span> <span class="kp">true</span><span class="o">.</span>
</span><span class='line'>    <span class="s2">&quot;lists&quot;</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="sr">//</span><span class="p">(</span><span class="no">Un</span><span class="p">)</span><span class="n">ordered</span> <span class="n">lists</span><span class="p">,</span> <span class="n">e</span><span class="o">.</span><span class="n">g</span><span class="o">.</span> <span class="no">Bullets</span><span class="p">,</span> <span class="no">Numbers</span><span class="o">.</span> <span class="no">Default</span> <span class="kp">true</span><span class="o">.</span>
</span><span class='line'>    <span class="s2">&quot;html&quot;</span><span class="p">:</span> <span class="kp">false</span><span class="p">,</span> <span class="sr">//</span><span class="no">Button</span> <span class="n">which</span> <span class="n">allows</span> <span class="n">you</span> <span class="n">to</span> <span class="n">edit</span> <span class="n">the</span> <span class="n">generated</span> <span class="no">HTML</span><span class="o">.</span> <span class="no">Default</span> <span class="kp">false</span><span class="o">.</span>
</span><span class='line'>    <span class="s2">&quot;link&quot;</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="sr">//</span><span class="no">Button</span> <span class="n">to</span> <span class="n">insert</span> <span class="n">a</span> <span class="n">link</span><span class="o">.</span> <span class="no">Default</span> <span class="kp">true</span><span class="o">.</span>
</span><span class='line'>    <span class="s2">&quot;image&quot;</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="sr">//</span><span class="no">Button</span> <span class="n">to</span> <span class="n">insert</span> <span class="n">an</span> <span class="n">image</span><span class="o">.</span> <span class="no">Default</span> <span class="kp">true</span><span class="o">.</span>
</span><span class='line'>    <span class="s2">&quot;color&quot;</span><span class="p">:</span> <span class="kp">true</span> <span class="sr">//</span><span class="no">Button</span> <span class="n">to</span> <span class="n">change</span> <span class="n">color</span> <span class="n">of</span> <span class="n">font</span><span class="o">.</span> <span class="no">Default</span> <span class="kp">true</span><span class="o">.</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">script</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里的逻辑和特定页面耦合在一起，导致代码不可复用。</p>

<p><strong>好的</strong></p>

<p>Rails里面有专门用于组织和存放javascript代码的地方：“app/assets/javascripts/”。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">//</span> <span class="n">app</span><span class="o">/</span><span class="n">assets</span><span class="o">/</span><span class="n">javascripts</span><span class="o">/</span><span class="n">application</span><span class="o">.</span><span class="n">js</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="err">$</span><span class="p">(</span><span class="n">document</span><span class="p">)</span><span class="o">.</span><span class="n">ready</span><span class="p">(</span><span class="n">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="err">$</span><span class="p">(</span><span class="s1">&#39;textarea.wysihtml5&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">wysihtml5</span><span class="p">({</span>
</span><span class='line'>    <span class="s2">&quot;font-styles&quot;</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="sr">//</span><span class="no">Font</span> <span class="n">styling</span><span class="p">,</span> <span class="n">e</span><span class="o">.</span><span class="n">g</span><span class="o">.</span> <span class="n">h1</span><span class="p">,</span> <span class="n">h2</span><span class="p">,</span> <span class="n">etc</span><span class="o">.</span> <span class="no">Default</span> <span class="kp">true</span><span class="o">.</span>
</span><span class='line'>    <span class="s2">&quot;emphasis&quot;</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="sr">//</span><span class="no">Italics</span><span class="p">,</span> <span class="n">bold</span><span class="p">,</span> <span class="n">etc</span><span class="o">.</span> <span class="no">Default</span> <span class="kp">true</span><span class="o">.</span>
</span><span class='line'>    <span class="s2">&quot;lists&quot;</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="sr">//</span><span class="p">(</span><span class="no">Un</span><span class="p">)</span><span class="n">ordered</span> <span class="n">lists</span><span class="p">,</span> <span class="n">e</span><span class="o">.</span><span class="n">g</span><span class="o">.</span> <span class="no">Bullets</span><span class="p">,</span> <span class="no">Numbers</span><span class="o">.</span> <span class="no">Default</span> <span class="kp">true</span><span class="o">.</span>
</span><span class='line'>    <span class="s2">&quot;html&quot;</span><span class="p">:</span> <span class="kp">false</span><span class="p">,</span> <span class="sr">//</span><span class="no">Button</span> <span class="n">which</span> <span class="n">allows</span> <span class="n">you</span> <span class="n">to</span> <span class="n">edit</span> <span class="n">the</span> <span class="n">generated</span> <span class="no">HTML</span><span class="o">.</span> <span class="no">Default</span> <span class="kp">false</span><span class="o">.</span>
</span><span class='line'>    <span class="s2">&quot;link&quot;</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="sr">//</span><span class="no">Button</span> <span class="n">to</span> <span class="n">insert</span> <span class="n">a</span> <span class="n">link</span><span class="o">.</span> <span class="no">Default</span> <span class="kp">true</span><span class="o">.</span>
</span><span class='line'>    <span class="s2">&quot;image&quot;</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="sr">//</span><span class="no">Button</span> <span class="n">to</span> <span class="n">insert</span> <span class="n">an</span> <span class="n">image</span><span class="o">.</span> <span class="no">Default</span> <span class="kp">true</span><span class="o">.</span>
</span><span class='line'>    <span class="s2">&quot;color&quot;</span><span class="p">:</span> <span class="kp">true</span> <span class="sr">//</span><span class="no">Button</span> <span class="n">to</span> <span class="n">change</span> <span class="n">color</span> <span class="n">of</span> <span class="n">font</span><span class="o">.</span> <span class="no">Default</span> <span class="kp">true</span><span class="o">.</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;!--</span> <span class="n">app</span><span class="o">/</span><span class="n">views</span><span class="o">/</span><span class="n">questions</span><span class="o">/</span><span class="n">show</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">erb</span> <span class="o">--&gt;</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">textarea</span> <span class="n">rows</span><span class="o">=</span><span class="s2">&quot;4&quot;</span> <span class="n">cols</span><span class="o">=</span><span class="s2">&quot;50&quot;</span> <span class="n">class</span><span class="o">=</span><span class="s1">&#39;wysihtml5&#39;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="no">Insert</span> <span class="n">your</span> <span class="n">question</span> <span class="n">details</span> <span class="n">here</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/textarea&gt;</span>
</span><span class='line'><span class="sr">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在我们可以在view层任何地方用这段代码了。只需要页面上有一个带有wysihtml5这个class的textarea，刚才的那段js就会被执行。</p>

<p><strong>注意：</strong>这只是个简单的范例，实际应用时需要考虑是否需要把你的JavaScript拆分成若干小的文件，并通过application.js来加载这些文件。另外，如果你使用的是CoffeeScript而非JavaScript，请坚持不要把CoffeeScript与普通JavaScript在一起混写。</p>

<h3>调用方法时把另一个方法的调用作为参数</h3>

<p><strong>不好的</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/services/find_or_create_topic.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">FindOrCreateTopic</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">perform</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="n">find</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">sluggify</span><span class="p">(</span><span class="nb">name</span><span class="p">))</span> <span class="o">||</span> <span class="n">create</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="nb">name</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码里调用了find方法并传入了2个参数，首参数为user，第二个参数则是直接调用了sluggify这个方法并把name作为参数传给sluggify。你也许会有疑问，这么写有什么问题吗？我明明完全能够看懂这段代码呀。是的，代码也许不难理解，但是每次到这里你都需要自己做一点脑筋转换，而这正是我一直极力想要避免的。</p>

<p><strong>好的</strong></p>

<p>避免需要脑筋转换的一个比较有效的办法就是：使用有意义的变量名。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/services/find_or_create_topic.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">FindOrCreateTopic</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">perform</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="n">slug</span> <span class="o">=</span> <span class="n">sluggify</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="n">find</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">slug</span><span class="p">)</span> <span class="o">||</span> <span class="n">create</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="nb">name</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样做可以避免脑筋转换。换用含义明确的变量名之后，每当你再调用find方法，就会知道find接受一个user和一个slug做参数。</p>

<h3>没有使用类来隔离Rake Tasks</h3>

<p><strong>不好的</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># lib/tasks/recalculate_badges_for_users.rake</span>
</span><span class='line'><span class="n">namespace</span> <span class="ss">:users</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;Recalculates Badges for Users&quot;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">recalculate_badges</span><span class="p">:</span> <span class="ss">:environment</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">user_count</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">count</span>
</span><span class='line'>
</span><span class='line'>    <span class="no">User</span><span class="o">.</span><span class="n">find_each</span> <span class="k">do</span> <span class="o">|</span><span class="n">user</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">index</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">user_count</span><span class="si">}</span><span class="s2"> Recalculating Badges for: </span><span class="si">#{</span><span class="n">user</span><span class="o">.</span><span class="n">email</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">questions_with_negative_votes</span> <span class="o">&gt;=</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">user</span><span class="o">.</span><span class="n">answers_with_negative_votes</span> <span class="o">&gt;=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="n">user</span><span class="o">.</span><span class="n">grant_badge</span><span class="p">(</span><span class="s1">&#39;Critic&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">user</span><span class="o">.</span><span class="n">answers</span><span class="o">.</span><span class="n">find_each</span> <span class="k">do</span> <span class="o">|</span><span class="n">answer</span><span class="o">|</span>
</span><span class='line'>        <span class="n">question</span>   <span class="o">=</span> <span class="n">answer</span><span class="o">.</span><span class="n">question</span>
</span><span class='line'>        <span class="k">next</span> <span class="k">unless</span> <span class="n">answer</span> <span class="o">&amp;&amp;</span> <span class="n">question</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">days</span>       <span class="o">=</span> <span class="n">answer</span><span class="o">.</span><span class="n">created_at</span> <span class="o">-</span> <span class="n">question</span><span class="o">.</span><span class="n">created_at</span>
</span><span class='line'>        <span class="n">days_count</span> <span class="o">=</span> <span class="p">(</span><span class="n">days</span> <span class="o">/</span> <span class="mi">1</span><span class="o">.</span><span class="n">day</span><span class="p">)</span><span class="o">.</span><span class="n">round</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">days_count</span> <span class="o">&gt;=</span> <span class="mi">60</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">question</span><span class="o">.</span><span class="n">vote_count</span> <span class="o">&gt;=</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'>          <span class="n">grant_badge</span><span class="p">(</span><span class="s1">&#39;Necromancer&#39;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="k">return</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个rake task有问题多多。最主要的问题是，这个rake太长了而且不好测试。代码写的初一看也很难理解。你只好相信这个task的确是为用户重新计算奖章系统的，因为它上面描述就这么写的。</p>

<p><strong>好的</strong></p>

<p>解决这个问题最好的办法就是，把业务逻辑挪到一个特定的类里面。所以，让我们新建个类来搞定它吧。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/services/recalculate_badge.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">RecalculateBadge</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:user</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@user</span> <span class="o">=</span> <span class="n">user</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">grant_citric</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">grant_citric?</span>
</span><span class='line'>      <span class="n">user</span><span class="o">.</span><span class="n">grant_badge</span><span class="p">(</span><span class="s1">&#39;Critic&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">grant_necromancer</span>
</span><span class='line'>    <span class="n">user</span><span class="o">.</span><span class="n">answers</span><span class="o">.</span><span class="n">find_each</span> <span class="k">do</span> <span class="o">|</span><span class="n">answer</span><span class="o">|</span>
</span><span class='line'>      <span class="n">question</span> <span class="o">=</span> <span class="n">answer</span><span class="o">.</span><span class="n">question</span>
</span><span class='line'>      <span class="k">next</span> <span class="k">unless</span> <span class="n">answer</span> <span class="o">&amp;&amp;</span> <span class="n">question</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="n">grant_necromancer?</span><span class="p">(</span><span class="n">answer</span><span class="p">,</span> <span class="n">question</span><span class="p">)</span>
</span><span class='line'>        <span class="n">grant_badge</span><span class="p">(</span><span class="s1">&#39;Necromancer&#39;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="k">return</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">protected</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">grant_citric?</span>
</span><span class='line'>      <span class="p">(</span><span class="n">user</span><span class="o">.</span><span class="n">questions_with_negative_votes</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>      <span class="p">(</span><span class="n">user</span><span class="o">.</span><span class="n">answers_with_negative_votes</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">days_count</span><span class="p">(</span><span class="n">answer</span><span class="p">,</span> <span class="n">question</span><span class="p">)</span>
</span><span class='line'>      <span class="n">days</span> <span class="o">=</span> <span class="n">answer</span><span class="o">.</span><span class="n">created_at</span> <span class="o">-</span> <span class="n">question</span><span class="o">.</span><span class="n">created_at</span>
</span><span class='line'>      <span class="p">(</span><span class="n">days</span> <span class="o">/</span> <span class="mi">1</span><span class="o">.</span><span class="n">day</span><span class="p">)</span><span class="o">.</span><span class="n">round</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">grant_necromancer?</span><span class="p">(</span><span class="n">answer</span><span class="p">,</span> <span class="n">question</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="n">days_count</span><span class="p">(</span><span class="n">answer</span><span class="p">,</span><span class="n">question</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">60</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>      <span class="p">(</span><span class="n">question</span><span class="o">.</span><span class="n">vote_count</span> <span class="o">&gt;=</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># lib/tasks/recalculate_badges_for_users.rake</span>
</span><span class='line'><span class="n">namespace</span> <span class="ss">:users</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;Recalculates Badges for Users&quot;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">recalculate_badges</span><span class="p">:</span> <span class="ss">:environment</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">user_count</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">count</span>
</span><span class='line'>
</span><span class='line'>    <span class="no">User</span><span class="o">.</span><span class="n">find_each</span> <span class="k">do</span> <span class="o">|</span><span class="n">user</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">index</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">user_count</span><span class="si">}</span><span class="s2"> Recalculating Badges for: </span><span class="si">#{</span><span class="n">user</span><span class="o">.</span><span class="n">email</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="n">task</span> <span class="o">=</span> <span class="no">RecalculateBadge</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>      <span class="n">task</span><span class="o">.</span><span class="n">grant_citric</span>
</span><span class='line'>      <span class="n">task</span><span class="o">.</span><span class="n">grant_necromancer</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>如你所见，现在这个rake task可读性要好的多，而且还可以单独测试每一种批准徽章的方法。除此以外我么也可以在有需要时复用这个类。当然这段代码只是点到即止，诸位可以再做进一步优化。</p>

<h3>没有遵循Sandi Metz的规则</h3>

<ol>
<li>每个类代码不可以超过100行</li>
<li>每个方法代码不可以超过5行</li>
<li>方法参数不可以超过4个，hash项也包括在内</li>
<li>控制器之可以初始化一个对象。而且视图层只可以使用一个实例变量，并且只可以在这个对象上调用方法（@object.collaborator.value这种是不可以的）。</li>
</ol>


<p>更多关于Sandi Metz的规则请移步至<a href="http://robots.thoughtbot.com/">thoughtbot</a>,参阅<a href="http://robots.thoughtbot.com/sandi-metz-rules-for-developers">Sandi Metz&#8217; Rules For Developers</a>这篇博文。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用RSpec编写具有可读性的功能测试(译)]]></title>
    <link href="http://blog.banban.me/blog/blog/2014/07/15/shi-yong-rspecbian-xie-ju-you-ke-du-xing-de-gong-neng-ce-shi/"/>
    <updated>2014-07-15T10:37:24+08:00</updated>
    <id>http://blog.banban.me/blog/blog/2014/07/15/shi-yong-rspecbian-xie-ju-you-ke-du-xing-de-gong-neng-ce-shi</id>
    <content type="html"><![CDATA[<p>原文出自<a href="https://about.futurelearn.com/blog/how-we-write-readable-feature-tests-with-rspec/?utm_source=rubyweekly&amp;utm_medium=email">about.futurelearn.com</a>,感谢作者<a href="https://www.futurelearn.com/profiles/1390">Chris Zetter</a></p>

<p><strong>Chris Zetter是FutureLearn产品组的一名开发者，他为我们讲述了自己的小组为了使功能测试兼具可维护性与可读性，在把Cucumber替换为RSpec之后是如何来编写测试的。</strong></p>

<p>测试是建立与维护一个大型平台不可或缺的一部分。每当我们为FutureLearn这个平台增添新功能时，我们都会编写自动化的功能测试来记录这些新功能是如何运作的，并确保他们不运转时我们也能知晓。</p>

<h3>令人爱恨交加的Cucumber</h3>

<p>Cucumber是一款用来编写功能测试的常用工具，每当我们开启项目时它都是我们的不二选择。它可以让我们以用户的视角编写出高层级的行为驱动测试。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">Feature</span><span class="p">:</span> <span class="no">Enrolment</span>
</span><span class='line'>  <span class="ss">Scenario</span><span class="p">:</span> <span class="no">Enrolling</span> <span class="k">in</span> <span class="n">a</span> <span class="n">course</span>
</span><span class='line'>    <span class="no">Given</span> <span class="n">there</span> <span class="n">is</span> <span class="n">a</span> <span class="n">course</span>
</span><span class='line'>    <span class="no">And</span> <span class="n">I</span> <span class="n">am</span> <span class="n">logged</span> <span class="k">in</span> <span class="n">as</span> <span class="n">a</span> <span class="n">learner</span>
</span><span class='line'>    <span class="no">When</span> <span class="n">I</span> <span class="n">enrol</span> <span class="n">on</span> <span class="n">a</span> <span class="n">course</span>
</span><span class='line'>    <span class="no">Then</span> <span class="n">the</span> <span class="n">course</span> <span class="n">should</span> <span class="n">appear</span> <span class="k">in</span> <span class="s1">&#39;my courses&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们乐于使用Cucumber因为它可以使根据用户故事编写测试变得简单易行，而且写完的测试通俗易懂。然而使用Cucumber也有些许不足之处。首先，我们已经在项目里使用了RSpec，再引入Cucumber意味着又要多维护一个测试框架；其次，由于两者的DSLs和测试运行器不同，在他们之间进行脑筋切换又会带来额外开销；最后，我们特别不喜欢Cucumber所使用的正则表达式，因为同Ruby的标准方法调用相比，它们使测试变得更加晦涩难懂。</p>

<h3>编写更好的RSpec features</h3>

<p>那么，我么该如何在不失测试可读性的前提下停用Cucumber呢？</p>

<p>我们已经开始使用RSpec features来替代Cucumber，它们通常看起来会是这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">feature</span> <span class="s1">&#39;Enrolment&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">scenario</span> <span class="s1">&#39;Enrolling in a course&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">course</span> <span class="o">=</span> <span class="no">FactoryGirl</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:course</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">learner</span> <span class="o">=</span> <span class="no">FactoryGirl</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:learner</span><span class="p">)</span>
</span><span class='line'>    <span class="n">login_as</span> <span class="n">learner</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">visit</span> <span class="n">course_path</span><span class="p">(</span><span class="n">course</span><span class="p">)</span>
</span><span class='line'>    <span class="n">find</span><span class="p">(</span><span class="s1">&#39;.join&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">click</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_content</span><span class="p">(</span><span class="s1">&#39;Thanks for joining!&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">visit</span> <span class="s1">&#39;/&#39;</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_main_header</span><span class="p">(</span><span class="s1">&#39;My Courses&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_content</span><span class="p">(</span><span class="n">course</span><span class="o">.</span><span class="n">full_title</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>它们总是趋于变得很长，使得难以辨明其究竟在测试些什么。而且难以区分诸如Arrange, Act, Assert（在Cucumber里又被称为&#8217;Given&#8217;、&#8217;When&#8217;和&#8217;Then&#8217;）这些部分。我们试过在代码中这些步骤里添加注释，但它们就和通常那些程序代码里的注释一样不尽如人意：一段时间之后这些注释就变得与实际代码不同步了。</p>

<p>一般来说，如果是在程序里别的地方写出这么长的方法，我们就会有所警觉，并且通常会采用提取方法的办法进行重构。何不也这么做呢？让我们依据Cucumber步骤的风格，把这些代码也提取成一个个方法吧。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">feature</span> <span class="s1">&#39;Enrolment&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">scenario</span> <span class="s1">&#39;Enrolling in a course&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">given_there_is_a_course</span>
</span><span class='line'>    <span class="n">and_i_am_logged_in_as_a_learner</span>
</span><span class='line'>    <span class="n">when_i_enrol_on_a_course</span>
</span><span class='line'>    <span class="n">then_the_course_should_appear_in_my_courses</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">given_there_is_a_course</span>
</span><span class='line'>    <span class="vi">@course</span> <span class="o">=</span> <span class="no">FactoryGirl</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:course</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">and_i_am_logged_in_as_a_learner</span>
</span><span class='line'>    <span class="vi">@learner</span> <span class="o">=</span> <span class="no">FactoryGirl</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:learner</span><span class="p">)</span>
</span><span class='line'>    <span class="n">login_as</span> <span class="vi">@learner</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">when_i_enrol_on_a_course</span>
</span><span class='line'>    <span class="n">visit</span> <span class="n">course_path</span><span class="p">(</span><span class="vi">@course</span><span class="p">)</span>
</span><span class='line'>    <span class="n">find</span><span class="p">(</span><span class="s1">&#39;.join&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">click</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_content</span><span class="p">(</span><span class="s1">&#39;Thanks for joining!&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">then_the_course_should_appear_in_my_courses</span>
</span><span class='line'>    <span class="n">visit</span> <span class="s1">&#39;/&#39;</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_main_header</span><span class="p">(</span><span class="s1">&#39;My Courses&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_content</span><span class="p">(</span><span class="vi">@course</span><span class="o">.</span><span class="n">full_title</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>我们有何发现</h3>

<p>我们移除了全部的Cucumber功能测试，并把它们中大部分用新式的RSpec features加以重写。这样一来即可保证拥有Cucumber所提供的优秀的可读性，又使得测试变得更加便于编写和维护。</p>

<p>我们做了一个慎重的决定，不把各个features文件里提取的方法进行复用，因为担心这么做会使得测试难于理解。我们发现在编写一个feature下的多条scenario时，会不自觉的就想要进行代码复用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[apache下设置AddDefaultCharset的问题]]></title>
    <link href="http://blog.banban.me/blog/blog/2014/07/04/apachexia-she-zhi-adddefaultcharsetde-wen-ti/"/>
    <updated>2014-07-04T14:09:29+08:00</updated>
    <id>http://blog.banban.me/blog/blog/2014/07/04/apachexia-she-zhi-adddefaultcharsetde-wen-ti</id>
    <content type="html"><![CDATA[<p>通过iframe在子页面里加载scorm课件, utf-8编码的可正常显示, shift_jis的乱码<br/>
可是子页面里已经通过meta设置了charset</p>

<p>怀疑是被其他地方的charset覆盖掉, 后来找到篇文章说可能有apache的AddDefaultCharset设置有关</p>

<p>本地测试验证了怀疑:</p>

<blockquote><p>  不加AddDefaultCharset            正常显示<br/>
  加上AddDefaultCharset utf-8      乱码<br/>
  改成AddDefaultCharset shift_jis  恢复正常</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[几个鲜为人知的ActiveRecord Associations小技巧 (译)]]></title>
    <link href="http://blog.banban.me/blog/blog/2014/07/04/ji-ge-xian-wei-ren-zhi-de-activerecord-associationsxiao-ji-qiao-yi/"/>
    <updated>2014-07-04T10:08:40+08:00</updated>
    <id>http://blog.banban.me/blog/blog/2014/07/04/ji-ge-xian-wei-ren-zhi-de-activerecord-associationsxiao-ji-qiao-yi</id>
    <content type="html"><![CDATA[<p>原文出自<a href="http://www.gotealeaf.com/blog/ruby-on-rails-activerecord-association-features/">gotealeaf.com</a>, 感谢作者Steve Turczyn</p>

<p>作为一个Rails开发者, 与ActiveRecord associations打交道实属家常便饭. 但其中若干特性, 却非尽人皆知.</p>

<h3>自定义查询</h3>

<p>假如你在开发一个允许发表评论的博客, 保不齐会遇到各种不和谐的言论充斥于评论间(这里毕竟是互联网). 为了保证只显示经核准的评论, 你要在comments表里加一个<code>boolean</code>型字段:<code>approved</code>.</p>

<p>对于每篇博客, 由于只想取出审核过的评论(即那些被管理员标记为通过的), 所以需要自定义查询.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/post.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:approved_comments</span><span class="p">,</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">where</span> <span class="ss">approved</span><span class="p">:</span> <span class="kp">true</span> <span class="p">},</span> <span class="ss">class_name</span><span class="p">:</span> <span class="s1">&#39;Comment&#39;</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在, 当你需要取出某篇博客里审核过的评论时, 只需要使用<code>my_post.approved_comments</code>.</p>

<h3>扩展</h3>

<p>有可能你还是需要有个选项能调出一篇博客的全部评论, 或者只看在今天发的那些. 这时你可以利用扩展功能, 在某个特定的关系上追加一个自定义方法.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/post.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:comments</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">today</span>
</span><span class='line'>      <span class="n">where</span><span class="p">(</span><span class="s2">&quot;created_at &gt;= ?&quot;</span><span class="p">,</span> <span class="no">Time</span><span class="o">.</span><span class="n">zone</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">beginning_of_day</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样一来, 除了原本的<code>my_post.comments</code>, 你还能通过诸如<code>my_post.comments.today</code>这种调用让检索更确切.</p>

<h3>回调</h3>

<p>在记录被添加或移除之前与之后, 自动的调用方法, 这个可以有.</p>

<p>假如你有一个建筑项目(BuildingProject), 里面有许多工人(Worker). 每次增加一个工人, 都需要重新计算项目预算和完工日期的变化, 而这些有又可能与工人类型工作经验等等息息相关&hellip;好个麻烦的方法, 要能在添加完工人后自动调用就好了.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/building_project.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">BuildingProject</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:workers</span><span class="p">,</span> <span class="ss">after_add</span><span class="p">:</span> <span class="ss">:recalculate_project_status</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">recalculate_project_status</span><span class="p">(</span><span class="n">newly_added_worker</span><span class="p">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<h3>inverse_of</h3>

<p><code>inverse_of</code>可以很方便的使相互关联的对象从任意方向被访问到. <code>my_post.comments</code>和<code>my_comment.post</code>. 当然, 在<code>Post</code>里指定<code>has_many :comments</code>并且在<code>Comment</code>里指定<code>belongs_to :post</code>之后, 便已经可以得到上述2个关系. 但是加上<code>inverse_of</code>之后, 会让rails确保关系里的对象乃是相同的对象.</p>

<p><code>inverse_of</code>指定方法如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/post.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">.</span><span class="n">Base</span>
</span><span class='line'> <span class="n">has_many</span> <span class="ss">:comments</span><span class="p">,</span> <span class="ss">inverse_of</span><span class="p">:</span> <span class="n">post</span>
</span><span class='line'> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在先去掉<code>inverse_of</code>, 如果你这样这样这样&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">update_attribute</span><span class="p">(</span><span class="ss">:importance</span><span class="p">,</span> <span class="kp">false</span><span class="p">)</span>
</span><span class='line'><span class="n">comment</span> <span class="o">=</span> <span class="n">post</span><span class="o">.</span><span class="n">comments</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'><span class="n">working_post</span> <span class="o">=</span> <span class="n">comment</span><span class="o">.</span><span class="n">post</span>
</span><span class='line'><span class="n">working_post</span><span class="o">.</span><span class="n">update_attribute</span><span class="p">(</span><span class="ss">:importance</span><span class="p">,</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">importance?</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>喔! 系统咋还是觉得你的blog不给力&hellip;这是因为<code>comment.post</code>执行了一次单独的DB查询, 得到的对象虽然对应DB里同一条Post记录,但却是不同的实例. 而原本那条post记录的对象还是不知道自己在DB的状态已经被改变了.</p>

<p>那么让我们把<code>inverse_of</code>加回去, 重新执行刚才的代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">update_attribute</span><span class="p">(</span><span class="ss">:importance</span><span class="p">,</span> <span class="kp">false</span><span class="p">)</span>
</span><span class='line'><span class="n">comment</span> <span class="o">=</span> <span class="n">post</span><span class="o">.</span><span class="n">comments</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'><span class="n">working_post</span> <span class="o">=</span> <span class="n">comment</span><span class="o">.</span><span class="n">post</span>
</span><span class='line'><span class="n">working_post</span><span class="o">.</span><span class="n">update_attribute</span><span class="p">(</span><span class="ss">:importance</span><span class="p">,</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">importance?</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>好多了! 加上<code>inverse_of</code>之后, <code>comment.post</code>不再做DB查询, 而是直接使用已被加到内存里的post对象的实例. 换言之, 这时的<code>working_post</code>就是上面的<code>post</code>, 所以对<code>working_post</code>的改变会直接反应在<code>post</code>上.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ajax滚动分页]]></title>
    <link href="http://blog.banban.me/blog/blog/2014/06/25/ajaxgun-dong-fen-ye/"/>
    <updated>2014-06-25T16:14:10+08:00</updated>
    <id>http://blog.banban.me/blog/blog/2014/06/25/ajaxgun-dong-fen-ye</id>
    <content type="html"><![CDATA[<p>还是记录一下吧, 不然时间一久又会像之前一样把细节忘掉</p>

<h3>需求</h3>

<p>聊天记录只显示最近50条, 若要查看历史记录, 可将记录向上滚动. 至顶部后自动加载上50条.</p>

<h3>技术要点</h3>

<p>页面加载完之后, 设置容器scrollTop将其定位到最底部</p>

<p>监测div的scroll事件, 判断容器滚动条到顶部时(<code>$("container").scrollTop == 0</code>), 发ajax请求.<br/>
进行中的风车gif图, 可在ajax onCreate和onSuccess里控制显示/隐藏.</p>

<p>controller按照常规分页查询处理即可.</p>

<p>response时, 要分别保存新纪录插入容器前后, 容器的scrollHeight值, 存入局部变量,<br/>
待新记录在容器里render完后, 修改容器的scrollTop值为2次scrollHeight之差,
从而使容器滚动位置在页面看来保持不变</p>

<h3>代码片段</h3>

<p>rails2.3项目, js框架使用的prototype&hellip;</p>

<figure class='code'><figcaption><span>view层js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">document.observe(&quot;dom:loaded&quot;, function() {</span>
</span><span class='line'><span class="x">  $(&quot;chat_list&quot;).scrollTop = $(&quot;chat_list&quot;).scrollHeight;    </span>
</span><span class='line'>
</span><span class='line'><span class="x">  $(&quot;chat_list&quot;).observe(&quot;scroll&quot;, function(){</span>
</span><span class='line'><span class="x">    if(this.scrollTop == 0) {</span>
</span><span class='line'><span class="x">      var page = $(&quot;page&quot;).value;</span>
</span><span class='line'><span class="x">      new Ajax.Request(&#39;/mypage/chat_team/load_history_logs/</span><span class="cp">&lt;%=</span> <span class="vi">@chat_team</span><span class="o">.</span><span class="n">id</span> <span class="cp">%&gt;</span><span class="x">&#39;, </span>
</span><span class='line'><span class="x">        { method: &#39;get&#39;, </span>
</span><span class='line'><span class="x">          parameters: { page: page },</span>
</span><span class='line'><span class="x">          onCreate: function(){</span>
</span><span class='line'><span class="x">            $(&quot;wait&quot;).show();</span>
</span><span class='line'><span class="x">          },</span>
</span><span class='line'><span class="x">          onSuccess: function(){</span>
</span><span class='line'><span class="x">            $(&quot;wait&quot;).hide();</span>
</span><span class='line'><span class="x">          }</span>
</span><span class='line'><span class="x">        }</span>
</span><span class='line'><span class="x">      );      </span>
</span><span class='line'><span class="x">    }</span>
</span><span class='line'><span class="x">  });    </span>
</span><span class='line'><span class="x">});</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>controller</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">load_history_logs</span>
</span><span class='line'>  <span class="vi">@page</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:page</span><span class="o">].</span><span class="n">to_i</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>  <span class="vi">@chat_logs</span> <span class="o">=</span> <span class="vi">@chat_team</span><span class="o">.</span><span class="n">chat_logs</span><span class="o">.</span><span class="n">paginate</span><span class="p">(</span>
</span><span class='line'>                    <span class="ss">:all</span><span class="p">,</span>
</span><span class='line'>                    <span class="ss">:page</span> <span class="o">=&gt;</span> <span class="vi">@page</span><span class="p">,</span>
</span><span class='line'>                    <span class="ss">:per_page</span> <span class="o">=&gt;</span> <span class="no">ChatLog</span><span class="o">::</span><span class="no">RECENT_LOGS_SIZE</span><span class="p">,</span>
</span><span class='line'>                    <span class="ss">:order</span> <span class="o">=&gt;</span> <span class="s2">&quot;created_at DESC&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">reverse</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">render</span> <span class="ss">:update</span> <span class="k">do</span> <span class="o">|</span><span class="n">page</span><span class="o">|</span>
</span><span class='line'>    <span class="n">page</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;$(&#39;page&#39;).value = </span><span class="si">#{</span><span class="vi">@page</span><span class="si">}</span><span class="s2">;&quot;</span>
</span><span class='line'>    <span class="n">page</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;var oldHeight = $(&#39;chat_list&#39;).scrollHeight;&quot;</span>
</span><span class='line'>    <span class="n">page</span><span class="o">.</span><span class="n">insert_html</span><span class="p">(</span><span class="ss">:top</span><span class="p">,</span> <span class="s2">&quot;chat_list&quot;</span><span class="p">,</span> <span class="n">render</span><span class="p">(</span><span class="ss">:partial</span> <span class="o">=&gt;</span> <span class="s2">&quot;/mypage/chat_team/chat_log&quot;</span><span class="p">,</span> <span class="ss">:collection</span> <span class="o">=&gt;</span> <span class="vi">@chat_logs</span><span class="p">))</span>
</span><span class='line'>    <span class="n">page</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;var newHeight = $(&#39;chat_list&#39;).scrollHeight;&quot;</span>
</span><span class='line'>    <span class="n">page</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;$(&#39;chat_list&#39;).scrollTop = newHeight - oldHeight;&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Everyday Rails RSpec]]></title>
    <link href="http://blog.banban.me/blog/blog/2014/06/19/everyday-rails-rspec/"/>
    <updated>2014-06-19T16:20:03+08:00</updated>
    <id>http://blog.banban.me/blog/blog/2014/06/19/everyday-rails-rspec</id>
    <content type="html"><![CDATA[<p>前段时间利用零碎时间走马观花的把The RSpec Book的前面部分(part1~part4)过了一遍<br/>
发现自己在测试这方面缺口真是不小<br/>
The RSpec Book前半部分偏理论性的东西很多, 啃得很生硬<br/>
于是买了本<a href="https://leanpub.com/everydayrailsrspec-cn">Andor Chen译的&lt;使用 RSpec 测试 Rails 程序></a>以作实践</p>

<h3>RSpec</h3>

<p>RSpec 2.99之后版本, 需要稍作变动
在<code>Gemfile</code>里加上<code>gem 'rspec-collection_matchers'</code></p>

<p>对于<strong> expectation </strong>, 之前的版本惯用的<code>should</code>形式<br/>
被改写为<code>expect(&lt;obj&gt;).to &lt;matcher&gt;</code>这种用法</p>

<p><strong> subject() </strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">CheckingAccount</span><span class="p">,</span> <span class="s2">&quot;with $50&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">subject</span> <span class="p">{</span> <span class="no">CheckingAccount</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Money</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="ss">:USD</span><span class="p">))</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">is_expected</span><span class="o">.</span><span class="n">to</span> <span class="n">have_a_balance_of</span><span class="p">(</span><span class="no">Money</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="ss">:USD</span><span class="p">))</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">is_expected</span><span class="o">.</span><span class="n">not_to</span> <span class="n">be_overdrawn</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">CheckingAccount</span><span class="p">,</span> <span class="s2">&quot;with a non-zero starting balance&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">subject</span><span class="p">(</span><span class="ss">:account</span><span class="p">)</span> <span class="p">{</span> <span class="no">CheckingAccount</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Money</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="ss">:USD</span><span class="p">))</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">is_expected</span><span class="o">.</span><span class="n">not_to</span> <span class="n">be_overdrawn</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;has a balance equal to the starting balance&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="c1">#account.balance.should eq(Money.new(50, :USD))</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="ss">:account</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="no">Money</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="ss">:USD</span><span class="p">))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong> mock &amp; stub </strong></p>

<p>RSpec 2.14之前的语法要这么写</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">d</span> <span class="o">=</span> <span class="n">double</span><span class="p">(</span><span class="ss">:message1</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'><span class="n">d</span><span class="o">.</span><span class="n">stub</span><span class="p">(</span><span class="ss">:message2</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="ss">:value</span><span class="p">)</span>
</span><span class='line'><span class="n">real_object</span><span class="o">.</span><span class="n">stub</span><span class="p">(</span><span class="ss">:message</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="ss">:value</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>之后可以这么写</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">d</span> <span class="o">=</span> <span class="n">double</span><span class="p">(</span><span class="ss">:message1</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'><span class="n">allow</span><span class="p">(</span><span class="n">d</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">receive</span><span class="p">(</span><span class="ss">:message2</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="ss">:value</span><span class="p">)</span>
</span><span class='line'><span class="n">allow</span><span class="p">(</span><span class="n">real_object</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">receive</span><span class="p">(</span><span class="ss">:message</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="ss">:value</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>FactoryGirl</h3>

<p>简化factory_girl代码</p>

<figure class='code'><figcaption><span>加到rails_helper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">include</span> <span class="no">FactoryGirl</span><span class="o">::</span><span class="no">Syntax</span><span class="o">::</span><span class="no">Methods</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong> Aliases </strong></p>

<p>可以用<code>aliases</code>简化关联关系</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:user</span><span class="p">,</span> <span class="ss">aliases</span><span class="p">:</span> <span class="o">[</span><span class="ss">:author</span><span class="p">,</span> <span class="ss">:commenter</span><span class="o">]</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">first_name</span> <span class="s2">&quot;John&quot;</span>
</span><span class='line'>    <span class="n">last_name</span> <span class="s2">&quot;Deo&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:post</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">author</span>  <span class="c1">#用以替代 association :author, factory: :user</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:comment</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">commerter</span>  <span class="c1">#替代  association :commenter, factory: :user</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong> Associations </strong></p>

<p>如果association的名字与factory的名字相同, 可以省略<code>association</code><br/>
也可以指定不同名的factory并覆盖某属性</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">factory</span> <span class="ss">:post</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">author</span> <span class="ss">factory</span><span class="p">:</span> <span class="ss">:user</span><span class="p">,</span> <span class="ss">last_name</span><span class="p">:</span> <span class="s2">&quot;skywalker&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Capybara</h3>

<p>以下方法别名只可用在功能测试中</p>

<blockquote><p>  <code>given</code>对应<code>let</code><br/>
  <code>background</code>对应<code>before</code><br/>
  <code>feature</code>对应<code>describe</code><br/>
  <code>scenario</code>对应<code>it</code></p></blockquote>

<p><strong> 涉及javascript </strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">feature</span> <span class="s2">&quot;About BigCo modal&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">scenario</span> <span class="s2">&quot;toggles display of the modal about display&quot;</span><span class="p">,</span> <span class="ss">js</span><span class="p">:</span> <span class="kp">true</span> <span class="k">do</span>
</span><span class='line'>    <span class="c1"># blablalbla</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外如果开启了<code>js: true</code>时, 要测试DB变化, 有可能DB反映慢导致测试失败, 可以采取下面办法:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">expect</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">fill_in_new_user_data</span><span class="p">(</span><span class="s2">&quot;new_user@example.com&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">check</span> <span class="s2">&quot;user_admin&quot;</span>
</span><span class='line'>  <span class="n">click_button</span> <span class="s2">&quot;Create User&quot;</span>
</span><span class='line'>  <span class="nb">sleep</span> <span class="mi">1</span>
</span><span class='line'><span class="p">}</span><span class="o">.</span><span class="n">to</span> <span class="n">change</span><span class="p">(</span><span class="no">User</span><span class="p">,</span> <span class="ss">:count</span><span class="p">)</span><span class="o">.</span><span class="n">by</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Launchy</h3>

<p><code>save_and_open_page</code></p>

<h3>Guard</h3>

<p><code>bundle exec guard init rspec</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用AWS免费账户搭建PPTP VPN]]></title>
    <link href="http://blog.banban.me/blog/blog/2014/06/09/li-yong-awsmian-fei-zhang-hu-da-jian-vpn/"/>
    <updated>2014-06-09T14:35:19+08:00</updated>
    <id>http://blog.banban.me/blog/blog/2014/06/09/li-yong-awsmian-fei-zhang-hu-da-jian-vpn</id>
    <content type="html"><![CDATA[<p><strong> 首先, 你要有一个信用卡&hellip;  </strong>
或者似乎有人说可以在淘宝购买虚拟信用卡也是可行的, 但是里面余额要大于1美金</p>

<p><strong> 另外有人反应说注册时候被扣掉1美金 </strong>,<br/>
是因为首次注册时, ASW会为了验证信用卡有效性冻结1美金<br/>
被冻结的钱在服务到期后会返还<br/>
另外好像双币信用卡不会有这个问题</p>

<ol>
<li><h3>注册 AWS 账户</h3>

<p> 进入<a href="http://aws.amazon.com/">AWS主页</a>, 按照指示完成注册.</p>

<p> 需要注意注册过程会有一步 Identity Verification by Telephone,<br/>
 需要输入电话号码然后点击&#8221;Call Me Now&#8221;, 稍等片刻 Amazon 会有电话拨过来,</p>

<p> <img src="http://blog-banban.qiniudn.com/call_me_now.png" alt="call_me_now" /></p>

<p> 接到电话后在电话上输入您屏幕上的 &ldquo;Your Pin:&rdquo; 后标示的四位数字即可.</p>

<p> 之后会要求选择AWS Support Plan, 当然选Basic (Free)</p>

<p> 注册成功之后会进入Thank you页面, 选择启动AWS管理控制台.</p>

<p> <img src="http://blog-banban.qiniudn.com/launch_console.png" alt="launch_console" /></p>

<p> 之后选择&#8221;登录AWS控制台&#8221;按钮(右上方, 比较醒目的橙色)</p>

<p> 另外注册后您可能会受到从aws-verification@amazon.com发来的email,<br/>
 提醒你没通过验证无法使用Amazon Route 53 和 CloudFront(分别是AWS的NS和CDN服务).</p>

<p> 如果不打算用(反正也都收钱的&hellip;), 直接忽略即可</p>

<p> 如果想试一下这2个服务<br/>
 您可以提供 valid business URL 并使用此 URL 向aws-verification@amazon.com发一封确认邮件.  <br/>
 邮件可用以简单些, 内容如下即可(请注意使用您自己公司的site-url和email-address):</p>

<blockquote><p>   site url:         <a href="http://www.e-trust.com.cn/">http://www.e-trust.com.cn/</a>  <br/>
   email address:    han.bing@.e-trust.com.cn<br/>
   account:          <a href="&#109;&#x61;&#105;&#108;&#x74;&#111;&#58;&#x61;&#x6c;&#x67;&#x6f;&#51;&#49;&#x30;&#x33;&#49;&#x40;&#103;&#109;&#97;&#105;&#108;&#x2e;&#x63;&#111;&#x6d;">&#97;&#108;&#103;&#x6f;&#x33;&#49;&#x30;&#x33;&#49;&#64;&#103;&#109;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#111;&#109;</a></p></blockquote>

<p> 同时您还需要更改您的个人信息, 在 Web Site URL: 填入您公司的首页,<br/>
 Web Site URL: 的具体位置见下图:</p>

<p> <img src="http://blog-banban.qiniudn.com/web_site_url.png" alt="web_site_url" /></p>

<p> 邮件发送之后稍等片刻, 会收到Amazon的确认信息.</p></li>
<li><h3>启动并设置AWS EC2</h3>

<ol>
<li><p><strong> 选择region </strong>
 部署区域, 简易选择东京</p>

<p> <img src="http://blog-banban.qiniudn.com/select_region.png" alt="select_region" /></p></li>
<li><p><strong> 创建下载 Key Pairs </strong></p>

<p> 进入控制台后, 默认就会来到EC2 Dashbord页, 在这里选择Key Pairs
 创建 Key Pairs</p>

<p> <img src="http://blog-banban.qiniudn.com/key_pairs.png" alt="key_pairs" /></p>

<p> 完成后会得到一个.pem文件, 把他移动到<code>~/.ssh</code>目录下<br/>
 并更改权限为600</p>

<pre><code> mv ~/文件所在位置/algo31031.pem ~/.ssh/
 chmod 600 ~/.ssh/algo31031.pem
</code></pre>

<p> 请妥善保管您的.pem文件, 若遗失您可以删除之前的key_pairs并创建新的<br/>
 如果您希望使用自己的ssh key, 也可以选择&#8221;Import Key Pair&#8221;</p></li>
<li><p><strong> 启动EC2实例 </strong></p>

<p> 回到EC2 Dashbord页, 在这里选择Launch instance</p>

<p> <img src="http://blog-banban.qiniudn.com/launch_ec2_instance.png" alt="launch_ec2_instance" /></p>

<p> 选择需要的系统, 这里我们选用64位的ubuntu 14.04 PV了<br/>
 需要注意下如果没有free tier eligible标志的是需要收费的</p>

<p> <img src="http://blog-banban.qiniudn.com/select_ami.png" alt="select_ami" /></p>

<p> 选择实例类型时候, 要选择Micro instances<br/>
 记住这一点: 没有Free tier eligible都是要收钱的(有这个的用超了也要收钱&hellip;)
 之后一路Next(Add Storage那里可以适当加点, 但是不要超过30G), 一直到Configure Security Group
 这里除了默认的ssh 22 端口外, 还要开放1723端口, 否则连不上VPN</p>

<p> <img src="http://blog-banban.qiniudn.com/add_security_role.png" alt="add_security_role" /></p>

<p> 在launch EC2实例之前, 会有一步让你选择key pair, 用刚才创建的那个即可</p>

<p> <img src="http://blog-banban.qiniudn.com/select_key_pair.png" alt="select_key_pair" /></p>

<p> 至此, 已经有了一台AWS EC2可以用来折腾了</p>

<p> <img src="http://blog-banban.qiniudn.com/launch_status.png" alt="launch_status.png" /></p></li>
</ol>
</li>
<li><h3>登录EC2配置安装PPTV VPN</h3>

<ol>
<li><p><strong> 为EC2实例绑定Elastic IP </strong>
 创建完的EC2实例虽然有自己的公网IP, 但是每次重新启动都会变化<br/>
 所以需要为其绑定Elastic IP</p>

<p> <img src="http://blog-banban.qiniudn.com/add_elastic_ip.png" alt="add_elastic_ip" /></p>

<p> 申请完之后, 将其与刚才创建的EC2实例关联</p>

<p> <img src="http://blog-banban.qiniudn.com/associate_ec2_instance.png" alt="associate_ec2_instance" /></p></li>
<li><p><strong> 通过ssh登录EC2实例 </strong></p>

<p> 修改<code>~/.ssh/config</code>, 在里面添加如下内容, 注意替换HostName成自己的Elastic IP<br/>
 并把IdentityFile改成自己机器上.pem文件的路径</p>

<pre><code> Host aws_ec2
   HostName 54.199.xxx.xxx
   User ubuntu
   IdentityFile /home/hanbing/.ssh/algo31031.pem
</code></pre>

<p> 打开终端, 使用<code>ssh aws_ec2</code>登录EC2实例</p></li>
<li><p><strong> 在EC2实例下安装PPTP VPN </strong></p>

<p> 具体内容可以<a href="http://www.yzhang.net/blog/2013-03-07-pptp-vpn-ec2.html">参考这篇文章</a>, 以下内容只是对原文重点部分摘录并稍作修改以适应ubuntu</p>

<p> 安装pptpd</p>

<p> <code>sudo apt-get install pptpd</code></p>

<p> 修改<code>/etc/pptpd.conf</code>文件, 在最先面添加以下2行</p>

<pre><code> localip     192.168.9.1
 remoteip    192.168.9.11-30
</code></pre>

<p> 之后修改<code>/etc/ppp/options.pptpd</code>文件, 加上谷歌的dns</p>

<pre><code> ms-dns    8.8.8.8
 ms-dns    8.8.4.4
</code></pre>

<p> 接下来修改<code>/etc/ppp/chap-secrets</code>文件, 配置你自己VPN的用户名/密码, 格式如下:</p>

<pre><code> &lt;username&gt; pptpd &lt;passwd&gt; *
</code></pre>

<p> 修改<code>/etc/sysctl.conf</code>文件, 添加以下内容(默认里面有这行, 把注释去掉也可)</p>

<pre><code> net.ipv4.ip_forward=1
</code></pre>

<p> 执行<code>sudo /sbin/sysctl -p</code>重新加载配置</p>

<p> 启用<code>iptables</code>的NAT configuration</p>

<pre><code> sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
</code></pre>

<p> 为了保证每次EC2实例重启后NAT configuration能启动, 还要修改<code>/etc/rc.local</code>文件,
 在<code>exit 0</code>这行上面加上</p>

<pre><code> iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
</code></pre>

<p> 最后重启pptpd服务</p>

<pre><code> sudo /etc/init.d/pptpd restart
</code></pre></li>
</ol>
</li>
<li><h3>连接VPN</h3>

<p> <strong> 注意 </strong> AWS免费账户每月只有<strong> 15G </strong>免费流量,  用超了要<strong> 从信用卡扣钱的 </strong></p>

<ol>
<li><p><strong> ubuntu用户 </strong></p>

<p> <img src="http://blog-banban.qiniudn.com/vpn1.png" alt="vpn1.png" /></p>

<p> <img src="http://blog-banban.qiniudn.com/vpn2.png" alt="vpn2.png" /></p>

<p> <img src="http://blog-banban.qiniudn.com/vpn3.png" alt="vpn3.png" /></p></li>
<li><p><strong> Mac用户 </strong></p>

<p> 我没有mac, 图直接从别人那里偷的&hellip;</p>

<p> <img src="http://blog-banban.qiniudn.com/pptp-vpn-mac-1.png" alt="mac_vpn1.png" /></p>

<p> <img src="http://blog-banban.qiniudn.com/pptp-vpn-mac-2.png" alt="mac_vpn2.png" /></p></li>
</ol>
</li>
<li><h3>更换ip</h3>

<p> 需要先将原有的elastic ip从ec2实例解除绑定, 然后释放这个ip<br/>
 <strong> 注意 </strong> 一定要把不用的ip释放掉, 不然超过15分钟后就要扣钱的(只有绑定到运行中的ec2上才不扣钱)</p>

<p> <img src="http://blog-banban.qiniudn.com/reset_ip_1.png" alt="reset_ip" /></p>

<p> 之后按照之前的流程重申请一个Elastic IP并绑定到EC2实例即可</p>

<p> 更换完IP之后记得要把vpn连接信息里的地址一并替换掉</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The RSpec Book笔记(八) Cucumber]]></title>
    <link href="http://blog.banban.me/blog/blog/2014/06/09/the-rspec-bookbi-ji-ba-cucumber/"/>
    <updated>2014-06-09T10:11:16+08:00</updated>
    <id>http://blog.banban.me/blog/blog/2014/06/09/the-rspec-bookbi-ji-ba-cucumber</id>
    <content type="html"><![CDATA[<h3>Given/When/Then</h3>

<p><strong> Given </strong> 用来表示在一个scenario中我们认可为true的事物.<br/>
通过这个声明来给出在scenario中要发生的事件的上下文语境</p>

<p>given经常被误认为是先决条件, 但两者有概念上的不同:<br/>
先决条件是指某种强制约束, 如果达不到某一条件就无法继续进行下去;<br/>
但是given并被没有这种强制性, 为了使特定行为能满足其所需条件, given给出的条件可以被打破</p>

<p>换言之, 可以有<code>Given the world is round</code>, 但绝不会有<code>Given the world is flat</code></p>

<p><strong> When </strong> 用来表示scenario中的事件, 倾向于每个scenario只有一个独立事件</p>

<p><strong> Then </strong> 表示期待的结果</p>

<h3>Tags</h3>

<p>通过类似实例变量<code>@xxx</code>的形式指定tag,可以对feature和scenario指定任意数量的tag</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cucumber'><span class='line'><span class="nt">@approved</span><span class="nf"> </span><span class="nt">@iteration_12</span><span class="nf"></span>
</span><span class='line'><span class="k">Feature:</span><span class="nf"> patient requests appointment</span>
</span><span class='line'>
</span><span class='line'><span class="nf">  @wip</span>
</span><span class='line'><span class="nf">  </span><span class="k">Scenario:</span><span class="nf"> patient selects available time</span>
</span></code></pre></td></tr></table></div></figure>


<p>scenario会继承feature的tag, 运行时通过<code>--tags</code>指定执行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cucumber --tags @wip             <span class="c">#执行全部有@wip的scenarios</span>
</span><span class='line'>cucumber --tags @foo,@bar        <span class="c">#执行有@foo或者@bar的scenarios</span>
</span><span class='line'>cucumber --tags @foo --tags @bar <span class="c">#执行同时有@foo和@bar的</span>
</span><span class='line'>cucumber --tags ~@dev            <span class="c">#没有@dev的</span>
</span></code></pre></td></tr></table></div></figure>


<h3>参数</h3>

<p>在step definations中的正则表达式如果包含caputre group, 则会把他们作为参数传给代码块, 例如</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Given</span> <span class="sr">/^a hotel with &quot;([^&quot;]*)&quot; rooms and &quot;([^&quot;] *)&quot; bookings$/</span> <span class="k">do</span>
</span><span class='line'>  <span class="o">|</span><span class="n">room_count</span><span class="p">,</span> <span class="n">booking_count</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># blablabla</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>而这些step使用时候, 参数的部分也最好用引号括起来(非强制)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">Scenario</span><span class="p">:</span> <span class="no">Successful</span> <span class="n">booking</span>
</span><span class='line'>  <span class="no">Given</span> <span class="n">a</span> <span class="n">hotel</span> <span class="n">with</span> <span class="s2">&quot;5&quot;</span> <span class="n">rooms</span> <span class="ow">and</span> <span class="s2">&quot;0&quot;</span> <span class="n">bookings</span>
</span></code></pre></td></tr></table></div></figure>


<h3>World</h3>

<p>所有的cucumber scenario都运行在一个被称作World的对象新的实例上下文里<br/>
默认情况下World只是Object的实例, 在每个scenario之前被实例化<br/>
对于同一scenario的所有step definitions, 其代码块都在相同的上下文执行</p>

<p>可以使用<code>World()</code>方法自定义World, 方法接受一个或多个module</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">MyHelper</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">some_helper</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">World</span><span class="p">(</span><span class="no">MyHelper</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以在features或其子目录下的任意ruby文件里配置自定义的World,<br/>
但是推荐的做法是将其放在<code>features/support/world.rb</code>下</p>

<p>除了可以在World里混入代码块之外, 还可以更改用于实例化World的class的类型,<br/>
只需要在<code>World()</code>方法传入代码块</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MyWorld</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">some_helper</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">World</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">MyWorld</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Calling Steps Within Step Definitions</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">When</span> <span class="sr">/I transfer (.*) from (.*) to (.*)/</span> <span class="k">do</span> <span class="o">|</span><span class="n">amount</span><span class="p">,</span> <span class="n">source</span><span class="p">,</span> <span class="n">target</span><span class="o">|</span>
</span><span class='line'>  <span class="no">When</span> <span class="s2">&quot;I select </span><span class="si">#{</span><span class="n">source</span><span class="si">}</span><span class="s2"> as the source account&quot;</span>
</span><span class='line'>  <span class="no">When</span> <span class="s2">&quot;I select </span><span class="si">#{</span><span class="n">target</span><span class="si">}</span><span class="s2"> as the target account&quot;</span>
</span><span class='line'>  <span class="no">When</span> <span class="s2">&quot;I set </span><span class="si">#{</span><span class="n">amount</span><span class="si">}</span><span class="s2"> as the amount&quot;</span>
</span><span class='line'>  <span class="no">When</span> <span class="s2">&quot;I click transfer&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上代码等效于:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">When</span> <span class="sr">/I transfer (.*) from (.*) to (.*)/</span> <span class="k">do</span> <span class="o">|</span><span class="n">amount</span><span class="p">,</span> <span class="n">source</span><span class="p">,</span> <span class="n">target</span><span class="o">|</span>
</span><span class='line'>  <span class="n">steps</span> <span class="sx">%Q{</span>
</span><span class='line'><span class="sx">    When I select </span><span class="si">#{</span><span class="n">source</span><span class="si">}</span><span class="sx"> as the source account</span>
</span><span class='line'><span class="sx">    And I select </span><span class="si">#{</span><span class="n">target</span><span class="si">}</span><span class="sx"> as the target account</span>
</span><span class='line'><span class="sx">    And I set </span><span class="si">#{</span><span class="n">amount</span><span class="si">}</span><span class="sx"> as the amount</span>
</span><span class='line'><span class="sx">    And I click transfer</span>
</span><span class='line'><span class="sx">  }</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Tagged Hooks</h3>

<p>Before(&ldquo;@foo,~@bar&rdquo;, &ldquo;@zap&rdquo;) do
  puts &ldquo;This will run before each scenario tagged with @foo or not @bar AND @zap&rdquo;
end</p>

<h3>Background</h3>

<p>有时hooks非技术人员难以理解, 可以用background</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">Feature</span><span class="p">:</span> <span class="n">invite</span> <span class="n">friends</span>
</span><span class='line'>  <span class="ss">Background</span><span class="p">:</span> <span class="no">Logged</span> <span class="k">in</span>
</span><span class='line'>    <span class="no">Given</span> <span class="n">I</span> <span class="n">am</span> <span class="n">logged</span> <span class="k">in</span> <span class="n">as</span> <span class="s2">&quot;Aslak&quot;</span>
</span><span class='line'>    <span class="no">And</span> <span class="n">the</span> <span class="n">following</span> <span class="n">people</span> <span class="ss">exist</span><span class="p">:</span>
</span><span class='line'>      <span class="o">|</span> <span class="nb">name</span>   <span class="o">|</span> <span class="n">friend?</span> <span class="o">|</span>
</span><span class='line'>      <span class="o">|</span> <span class="no">David</span>  <span class="o">|</span> <span class="n">yes</span>     <span class="o">|</span>
</span><span class='line'>      <span class="o">|</span> <span class="no">Vidkun</span> <span class="o">|</span> <span class="n">no</span>      <span class="o">|</span>
</span><span class='line'>
</span><span class='line'>  <span class="ss">Scenario</span><span class="p">:</span> <span class="no">Invite</span> <span class="n">someone</span> <span class="n">who</span> <span class="n">is</span> <span class="n">already</span> <span class="n">a</span> <span class="n">friend</span>
</span><span class='line'>  <span class="ss">Scenario</span><span class="p">:</span> <span class="no">Invite</span> <span class="n">someone</span> <span class="n">who</span> <span class="n">is</span> <span class="ow">not</span> <span class="n">a</span> <span class="n">friend</span>
</span><span class='line'>  <span class="ss">Scenario</span><span class="p">:</span> <span class="no">Invite</span> <span class="n">someone</span> <span class="n">who</span> <span class="n">doesn</span><span class="err">&#39;</span><span class="n">t</span> <span class="n">have</span> <span class="n">an</span> <span class="n">account</span>
</span></code></pre></td></tr></table></div></figure>


<p>background在给定的feature里每个scenario之前执行,<br/>
如果有<code>Before</code> hooks, 则先执行<code>Before</code>, 再执行background</p>

<h3>Configuration</h3>

<p>可以在为cucumber添加配置文件, 放在<code>cucumber.yml</code>或<code>config/cucumber.yml下</code></p>

<figure class='code'><figcaption><span>cucumber.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">wip</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">--tags @wip features</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行cucumber时</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cucumber -p wip
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The RSpec Book笔记(七) RSpec的工具、集成与扩展]]></title>
    <link href="http://blog.banban.me/blog/blog/2014/06/05/the-rspec-bookbi-ji-qi-rspecde-gong-ju/"/>
    <updated>2014-06-05T14:29:11+08:00</updated>
    <id>http://blog.banban.me/blog/blog/2014/06/05/the-rspec-bookbi-ji-qi-rspecde-gong-ju</id>
    <content type="html"><![CDATA[<h3>The rspec Command</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rspec simple_math_spec.rb  <span class="c">#执行单个文件</span>
</span><span class='line'>rspec spec                 <span class="c">#执行spec文件夹下全部文件 </span>
</span></code></pre></td></tr></table></div></figure>


<p><strong> &ndash;format,设置输出格式 </strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rspec path/to/my/specs --format documentation
</span><span class='line'>rspec path/to/my/specs --format html:path/to/my/report.html
</span><span class='line'>rspec path/to/my/specs  --format progress <span class="se">\</span>
</span><span class='line'>                        --format nested:path/to/my/report.txt <span class="se">\</span>
</span><span class='line'>                        --format html:path/to/my/report.html
</span></code></pre></td></tr></table></div></figure>


<p><strong> 其他 </strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rspec spec --backtrace
</span><span class='line'>rspec spec --color
</span></code></pre></td></tr></table></div></figure>


<h3>Rake</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake spec               <span class="c">#执行spec下的全部specs文件</span>
</span><span class='line'>rake spec:controllers   <span class="c">#执行spec下的全部specs/controllers文件</span>
</span></code></pre></td></tr></table></div></figure>


<p>完整命令列表可以通过执行<code>rake -T spec</code>获取, 这些命令被定义在<code>RSpec::Core::RakeTask</code></p>

<p>可以在<code>Rakefile</code>里添加以下内容作来配置以rake执行的rspec</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rspec/core/rake_task&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">RSpec</span><span class="o">::</span><span class="no">Core</span><span class="o">::</span><span class="no">RakeTask</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">rspec_opts</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;--color&quot;</span><span class="p">,</span> <span class="s2">&quot;--format&quot;</span><span class="p">,</span> <span class="s2">&quot;specdoc&quot;</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Filtering</h3>

<p><strong> Inclusion </strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">filter</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:focus</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="s2">&quot;group&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;example 1&quot;</span><span class="p">,</span> <span class="ss">:focus</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;example 2&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面这段代码执行后会得到类似下面的输出</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>group
</span><span class='line'>  example 2
</span><span class='line'>
</span><span class='line'>Finished in 0.00067 seconds
</span><span class='line'><span class="m">1</span> example, <span class="m">0</span> failures
</span></code></pre></td></tr></table></div></figure>


<p>其中<code>it()</code>里的<code>:focus =&gt; true</code>部分被称为metadata<br/>
值可以通过<code>example.metadata[:focus]</code>获取到</p>

<p><strong> Exclusion </strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
</span><span class='line'><span class="n">c</span><span class="o">.</span><span class="n">exclusion_filter</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:slow</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="s2">&quot;group&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;example 1&quot;</span><span class="p">,</span> <span class="ss">:slow</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;example 2&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行时&#8221;example 2&#8221;被排除在外</p>

<p><strong> Lambdas </strong></p>

<p>Inclusion与Exclusion的filter都可以接受一个lambda处理更复杂的逻辑</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;ping&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">exclusion_filter</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">:if</span> <span class="o">=&gt;</span> <span class="nb">lambda</span> <span class="p">{</span><span class="o">|</span><span class="n">what</span><span class="o">|</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">what</span>
</span><span class='line'>      <span class="k">when</span> <span class="ss">:network_available</span>
</span><span class='line'>        <span class="o">!</span><span class="no">Ping</span><span class="o">.</span><span class="n">pingecho</span> <span class="s2">&quot;example.com&quot;</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">80</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="s2">&quot;network group&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;example 1&quot;</span><span class="p">,</span> <span class="ss">:if</span> <span class="o">=&gt;</span> <span class="ss">:network_available</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;example 2&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用faye的Extensions和Monitoring实时记录用户在线状况]]></title>
    <link href="http://blog.banban.me/blog/blog/2014/06/04/shi-yong-fayeshi-shi-ji-lu-liao-tian-zai-xian-ren-shu/"/>
    <updated>2014-06-04T15:14:02+08:00</updated>
    <id>http://blog.banban.me/blog/blog/2014/06/04/shi-yong-fayeshi-shi-ji-lu-liao-tian-zai-xian-ren-shu</id>
    <content type="html"><![CDATA[<p>faye的client如果想要接收到某个channel的聊天信息, 需要先subscribe这个channel</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">faye</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Faye</span><span class="p">.</span><span class="nx">Client</span><span class="p">(</span><span class="s2">&quot;localhost:9292/faye&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">faye</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="s1">&#39;/chat/channelXX&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">XXXXXXXXXXXXXx</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>
在进行subscribe时候, 会使用特定的channel <code>/meta/subscribe</code>,<br/>
并且faye server会对faye client分配一个唯一的client_id</p>

<p>类似的, 当faye client执行unsubscribe和disconnect时,<br/>
也会使用<code>/meta/unsubscribe</code>和<code>/meta/disconnect</code></p>

<p>于是, 可以在faye的browser client端添加扩展<br/>
使其在使用channel <code>/meta/subscribe</code>时, 传入ActiveRecord的相关id</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">faye.addExtension({</span>
</span><span class='line'><span class="x">  outgoing: function(message, callback) {</span>
</span><span class='line'><span class="x">    if (message.channel == &#39;/meta/subscribe&#39;) {</span>
</span><span class='line'><span class="x">      message.data = {user_id: </span><span class="cp">&lt;%=</span> <span class="n">current_user</span><span class="o">.</span><span class="n">id</span> <span class="cp">%&gt;</span><span class="x">, chat_team_id: </span><span class="cp">&lt;%=</span> <span class="vi">@chat_team</span><span class="o">.</span><span class="n">id</span> <span class="cp">%&gt;</span><span class="x">};</span>
</span><span class='line'><span class="x">    }</span>
</span><span class='line'><span class="x">    callback(message);</span>
</span><span class='line'><span class="x">  }</span>
</span><span class='line'><span class="x">}); </span>
</span></code></pre></td></tr></table></div></figure>


<p>之后, 与faye server端添加扩展, 通过传入的数据, 找到相应ActiveRecord记录, 并更改其状态为在线<br/>
同时还要记录下其client_id, 作为此user离线时再次找到此人的依据</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span>  <span class="nc">MarkOnline</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">incoming</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="n">callback</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">message</span><span class="o">[</span><span class="s1">&#39;channel&#39;</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39;/meta/subscribe&#39;</span>
</span><span class='line'>      <span class="no">UserChatTeam</span><span class="o">.</span><span class="n">mark_online</span><span class="p">(</span> <span class="n">message</span><span class="o">[</span><span class="s1">&#39;data&#39;</span><span class="o">][</span><span class="s1">&#39;user_id&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>                                <span class="n">message</span><span class="o">[</span><span class="s1">&#39;data&#39;</span><span class="o">][</span><span class="s1">&#39;chat_team_id&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>                                <span class="n">message</span><span class="o">[</span><span class="s1">&#39;clientId&#39;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">callback</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">faye_server</span> <span class="o">=</span> <span class="no">Faye</span><span class="o">::</span><span class="no">RackAdapter</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:mount</span> <span class="o">=&gt;</span> <span class="s1">&#39;/faye&#39;</span><span class="p">,</span> <span class="ss">:timeout</span> <span class="o">=&gt;</span> <span class="mi">45</span><span class="p">)</span>
</span><span class='line'><span class="n">faye_server</span><span class="o">.</span><span class="n">add_extension</span><span class="p">(</span><span class="no">MarkOnline</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>为了能在rack程序里使用ActiveRecord, 还需要在faye.ru文件里添加以下内容</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;active_record&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;mysql&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;yaml&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../app/models/user_chat_team.rb&#39;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">environment</span> <span class="o">=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;RACK_ENV&#39;</span><span class="o">]</span> <span class="o">||</span> <span class="s1">&#39;production&#39;</span>
</span><span class='line'><span class="n">dbconfig</span>    <span class="o">=</span> <span class="no">YAML</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s1">&#39;config/database.yml&#39;</span><span class="p">))</span>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">establish_connection</span><span class="p">(</span><span class="n">dbconfig</span><span class="o">[</span><span class="n">environment</span><span class="o">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来在faye server里添加monitor, 监视unsubscribe和disconnect事件<br/>
并根据之前记录的client_id将相关记录标记为离线, 同时清除client_id</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">faye_server</span><span class="o">.</span><span class="n">on</span><span class="p">(</span><span class="s1">&#39;unsubscribe&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">client_id</span><span class="p">,</span> <span class="n">channel</span><span class="o">|</span>
</span><span class='line'>  <span class="no">UserChatTeam</span><span class="o">.</span><span class="n">mark_offline</span><span class="p">(</span><span class="n">client_id</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">faye_server</span><span class="o">.</span><span class="n">on</span><span class="p">(</span><span class="s1">&#39;disconnect&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">client_id</span><span class="o">|</span>
</span><span class='line'>  <span class="no">UserChatTeam</span><span class="o">.</span><span class="n">mark_offline</span><span class="p">(</span><span class="n">client_id</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong> 可能会出现的问题 </strong><br/>
同一user对相同channel如果打开多个窗口<br/>
当其关闭其中一个窗口后, 即会判断为此user已离线</p>

<p><strong> 参考 </strong><br/>
<a href="http://faye.jcoglan.com/ruby/monitoring.html">faye monitoring</a><br/>
<a href="https://github.com/eoecn/faye-online">https://github.com/eoecn/faye-online</a><br/>
<a href="http://blog.edweng.com/2012/06/02/faye-extensions-tracking-users-in-a-chat-room/">Faye Exensions: Tracking Users in a Chat Room</a></p>

<figure class='code'><figcaption><span>faye.ru</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;faye&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../config/initializers/faye_token.rb&#39;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;active_record&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;mysql&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;yaml&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># using &#39;acts_as_paranoid&#39; as a plugin in &#39;vendor/plugins&#39;</span>
</span><span class='line'><span class="no">RAILS_ENV</span> <span class="o">=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;RACK_ENV&#39;</span><span class="o">]</span>
</span><span class='line'><span class="nb">load</span> <span class="s1">&#39;active_record/associations.rb&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../vendor/plugins/acts_as_paranoid/lib/caboose/acts/paranoid.rb&#39;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
</span><span class='line'><span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../vendor/plugins/acts_as_paranoid/lib/caboose/acts/belongs_to_with_deleted_association.rb&#39;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
</span><span class='line'><span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../vendor/plugins/acts_as_paranoid/lib/caboose/acts/has_many_through_without_deleted_association.rb&#39;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
</span><span class='line'><span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../vendor/plugins/acts_as_paranoid/init.rb&#39;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
</span><span class='line'><span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../app/models/user_chat_team.rb&#39;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">environment</span> <span class="o">=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;RACK_ENV&#39;</span><span class="o">]</span> <span class="o">||</span> <span class="s1">&#39;production&#39;</span>
</span><span class='line'><span class="n">dbconfig</span>    <span class="o">=</span> <span class="no">YAML</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s1">&#39;config/database.yml&#39;</span><span class="p">))</span>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">establish_connection</span><span class="p">(</span><span class="n">dbconfig</span><span class="o">[</span><span class="n">environment</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ServerAuth</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">incoming</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="n">callback</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">message</span><span class="o">[</span><span class="s1">&#39;channel&#39;</span><span class="o">]</span> <span class="o">!~</span> <span class="sr">%r{^/meta/}</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">message</span><span class="o">[</span><span class="s1">&#39;ext&#39;</span><span class="o">][</span><span class="s1">&#39;auth_token&#39;</span><span class="o">]</span> <span class="o">!=</span> <span class="no">FAYE_TOKEN</span>
</span><span class='line'>        <span class="n">message</span><span class="o">[</span><span class="s1">&#39;error&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;Invalid authentication token.&#39;</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">message</span><span class="o">[</span><span class="s1">&#39;ext&#39;</span><span class="o">].</span><span class="n">delete</span><span class="p">(</span><span class="s1">&#39;auth_token&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">callback</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span>  <span class="nc">MarkOnline</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">incoming</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="n">callback</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">message</span><span class="o">[</span><span class="s1">&#39;channel&#39;</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39;/meta/subscribe&#39;</span>
</span><span class='line'>      <span class="no">UserChatTeam</span><span class="o">.</span><span class="n">mark_online</span><span class="p">(</span> <span class="n">message</span><span class="o">[</span><span class="s1">&#39;data&#39;</span><span class="o">][</span><span class="s1">&#39;user_id&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>                                <span class="n">message</span><span class="o">[</span><span class="s1">&#39;data&#39;</span><span class="o">][</span><span class="s1">&#39;chat_team_id&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>                                <span class="n">message</span><span class="o">[</span><span class="s1">&#39;clientId&#39;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">callback</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">faye_server</span> <span class="o">=</span> <span class="no">Faye</span><span class="o">::</span><span class="no">RackAdapter</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:mount</span> <span class="o">=&gt;</span> <span class="s1">&#39;/faye&#39;</span><span class="p">,</span> <span class="ss">:timeout</span> <span class="o">=&gt;</span> <span class="mi">45</span><span class="p">)</span>
</span><span class='line'><span class="n">faye_server</span><span class="o">.</span><span class="n">add_extension</span><span class="p">(</span><span class="no">ServerAuth</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
</span><span class='line'><span class="n">faye_server</span><span class="o">.</span><span class="n">add_extension</span><span class="p">(</span><span class="no">MarkOnline</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">faye_server</span><span class="o">.</span><span class="n">on</span><span class="p">(</span><span class="s1">&#39;unsubscribe&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">client_id</span><span class="p">,</span> <span class="n">channel</span><span class="o">|</span>
</span><span class='line'>  <span class="no">UserChatTeam</span><span class="o">.</span><span class="n">mark_offline</span><span class="p">(</span><span class="n">client_id</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">faye_server</span><span class="o">.</span><span class="n">on</span><span class="p">(</span><span class="s1">&#39;disconnect&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">client_id</span><span class="o">|</span>
</span><span class='line'>  <span class="no">UserChatTeam</span><span class="o">.</span><span class="n">mark_offline</span><span class="p">(</span><span class="n">client_id</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">run</span> <span class="n">faye_server</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>faye browser client</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">var faye = new Faye.Client(&quot;</span><span class="cp">&lt;%=</span> <span class="vi">@faye_server</span> <span class="cp">%&gt;</span><span class="x">/faye&quot;);</span>
</span><span class='line'><span class="x">faye.disable(&#39;websocket&#39;);</span>
</span><span class='line'>
</span><span class='line'><span class="x">faye.addExtension({</span>
</span><span class='line'><span class="x">  outgoing: function(message, callback) {</span>
</span><span class='line'><span class="x">    if (message.channel == &#39;/meta/subscribe&#39;) {</span>
</span><span class='line'><span class="x">      message.data = {user_id: </span><span class="cp">&lt;%=</span> <span class="n">current_user</span><span class="o">.</span><span class="n">id</span> <span class="cp">%&gt;</span><span class="x">, chat_team_id: </span><span class="cp">&lt;%=</span> <span class="vi">@chat_team</span><span class="o">.</span><span class="n">id</span> <span class="cp">%&gt;</span><span class="x">};</span>
</span><span class='line'><span class="x">    }</span>
</span><span class='line'><span class="x">    callback(message);</span>
</span><span class='line'><span class="x">  }</span>
</span><span class='line'><span class="x">}); </span>
</span><span class='line'>
</span><span class='line'><span class="x">faye.subscribe(&#39;/chat/</span><span class="cp">&lt;%=</span> <span class="vi">@chat_team</span><span class="o">.</span><span class="n">channel</span> <span class="cp">%&gt;</span><span class="x">&#39;, function (data) {</span>
</span><span class='line'><span class="x">  $(&quot;chat_list&quot;).insert({bottom: data[&quot;chat_log&quot;].toString()});</span>
</span><span class='line'>
</span><span class='line'><span class="x">  var post = $(&quot;chat_list&quot;).childElements().last();</span>
</span><span class='line'>
</span><span class='line'><span class="x">  if(data[&quot;user_id&quot;].toString() != &quot;</span><span class="cp">&lt;%=</span> <span class="n">current_user</span><span class="o">.</span><span class="n">id</span> <span class="cp">%&gt;</span><span class="x">&quot;){</span>
</span><span class='line'><span class="x">    post.removeClassName(&quot;my-post&quot;);</span>
</span><span class='line'><span class="x">    post.addClassName(&quot;member-post&quot;)</span>
</span><span class='line'><span class="x">  }</span>
</span><span class='line'><span class="x">  var objDiv = $(&quot;chat_list&quot;);</span>
</span><span class='line'><span class="x">  objDiv.scrollTop = objDiv.scrollHeight;    </span>
</span><span class='line'><span class="x">  new Effect.Highlight(post.id);</span>
</span><span class='line'><span class="x">  $(&quot;errors&quot;).hide();</span>
</span><span class='line'><span class="x">});</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The RSpec Book笔记(六) RSpec::Mocks]]></title>
    <link href="http://blog.banban.me/blog/blog/2014/05/19/the-rspec-bookbi-ji-liu-rspec-mocks/"/>
    <updated>2014-05-19T16:04:29+08:00</updated>
    <id>http://blog.banban.me/blog/blog/2014/05/19/the-rspec-bookbi-ji-liu-rspec-mocks</id>
    <content type="html"><![CDATA[<h2>Chapter 14 RSpec::Mocks</h2>

<h3>Test Doubles, Method Stubs, Message Expectations</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">thingamajig_double</span> <span class="o">=</span> <span class="n">double</span><span class="p">(</span><span class="s1">&#39;thing-a-ma-jig&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">stub_thingamajig</span> <span class="o">=</span> <span class="n">stub</span><span class="p">(</span><span class="s1">&#39;thing-a-ma-jig&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">mock_thingamajig</span> <span class="o">=</span> <span class="n">mock</span><span class="p">(</span><span class="s1">&#39;thing-a-ma-jig&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>double()</code>,<code>stub()</code>,<code>mock()</code>都会返回一个<code>RSpec::Mocks::Mock</code>的实例<br/>
可以在这个实例上生成method stubs和message expectations</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">Statement</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;logs a message on generate()&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">customer</span> <span class="o">=</span> <span class="n">stub</span><span class="p">(</span><span class="s1">&#39;customer&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">customer</span><span class="o">.</span><span class="n">stub</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="s1">&#39;Aslak&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">logger</span> <span class="o">=</span> <span class="n">mock</span><span class="p">(</span><span class="s1">&#39;logger&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">statement</span> <span class="o">=</span> <span class="no">Statement</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">customer</span><span class="p">,</span> <span class="n">logger</span><span class="p">)</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span><span class="ss">:log</span><span class="p">)</span><span class="o">.</span><span class="n">with</span><span class="p">(</span><span class="sr">/Statement generated for Aslak/</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">statement</span><span class="o">.</span><span class="n">generate</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码中, <code>stub('customer')</code>和m<code>mock('logger')</code>分别生成了2个test double</p>

<p><code>customer.stub(:name)</code>为customer double添加了一个method stub(打桩方法), :name为方法名
<code>and_return('Aslak')</code>表示:name的返回值为Aslak</p>

<p><code>logger.should_receive(:log)</code>为logger double设置了一个对于message <code>name()</code> 的expectation<br/>
后面的<code>generate()</code>方法里, 如果<code>logger</code>对<code>log()</code>的调用失败, 则整个example会fail<br/>
否则会判断<code>logger.should_receive(:log)</code>后面的条件是否满足(此处为<code>with(xxx)</code>,即<code>log()</code>调用是否带参数xxx)</p>

<p><strong> partial stubbing, partial mocking </strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">WidgetsController</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">describe</span> <span class="s2">&quot;PUT update with valid attributes&quot;</span>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;finds the widget&quot;</span>
</span><span class='line'>      <span class="n">widget</span> <span class="o">=</span> <span class="no">Widget</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
</span><span class='line'>      <span class="n">widget</span><span class="o">.</span><span class="n">stub</span><span class="p">(</span><span class="ss">:update_attributes</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span>
</span><span class='line'>      <span class="no">Widget</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span><span class="ss">:find</span><span class="p">)</span><span class="o">.</span><span class="n">with</span><span class="p">(</span><span class="s2">&quot;37&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="n">widget</span><span class="p">)</span>
</span><span class='line'>      <span class="n">put</span> <span class="ss">:update</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="mi">37</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;updates the widget&#39;s attributes&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">widget</span> <span class="o">=</span> <span class="no">Widget</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
</span><span class='line'>      <span class="no">Widget</span><span class="o">.</span><span class="n">stub</span><span class="p">(</span><span class="ss">:find</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="n">widget</span><span class="p">)</span>
</span><span class='line'>      <span class="n">widget</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span><span class="ss">:update_attributes</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span>
</span><span class='line'>      <span class="n">put</span> <span class="ss">:update</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="mi">37</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;redirects to the list of widgets&quot;</span>
</span><span class='line'>      <span class="n">widget</span> <span class="o">=</span> <span class="no">Widget</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
</span><span class='line'>      <span class="no">Widget</span><span class="o">.</span><span class="n">stub</span><span class="p">(</span><span class="ss">:find</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="n">widget</span><span class="p">)</span>
</span><span class='line'>      <span class="n">widget</span><span class="o">.</span><span class="n">stub</span><span class="p">(</span><span class="ss">:update_attributes</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span>
</span><span class='line'>      <span class="n">put</span> <span class="ss">:update</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="mi">37</span>
</span><span class='line'>      <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">redirect_to</span><span class="p">(</span><span class="n">widgets_path</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>更多关于Method Stubs</h3>

<p><strong> One-Line Shortcut </strong></p>

<p><code>double()</code>,<code>stub()</code>,<code>mock()</code>第一个参数非必填但是强烈建议有, 因为其会作为失败时的消息<br/>
此外还可以接受一个hash作为第二参数</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">customer</span> <span class="o">=</span> <span class="n">double</span><span class="p">(</span><span class="s1">&#39;customer&#39;</span><span class="p">,</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s1">&#39;Bryan&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>等效于</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">customer</span> <span class="o">=</span> <span class="n">double</span><span class="p">(</span><span class="s1">&#39;customer&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">customer</span><span class="o">.</span><span class="n">stub</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="s1">&#39;Bryan&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong> Implementation Injection </strong></p>

<p>如果一个stub method需要使用多次而且根据条件不同会有不同返回值, 可以用如下方法<br/>
多用于<code>before()</code>里</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ages</span> <span class="o">=</span> <span class="n">double</span><span class="p">(</span><span class="s1">&#39;ages&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">ages</span><span class="o">.</span><span class="n">stub</span><span class="p">(</span><span class="ss">:age_for</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">what</span><span class="o">|</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">what</span> <span class="o">==</span> <span class="s1">&#39;drinking&#39;</span>
</span><span class='line'>    <span class="mi">21</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="n">what</span> <span class="o">==</span> <span class="s1">&#39;voting&#39;</span>
</span><span class='line'>    <span class="mi">18</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong> 方法链 </strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">article</span> <span class="o">=</span> <span class="n">double</span><span class="p">()</span>
</span><span class='line'><span class="no">Article</span><span class="o">.</span><span class="n">stub_chain</span><span class="p">(</span><span class="ss">:recent</span><span class="p">,</span> <span class="ss">:published</span><span class="p">,</span> <span class="ss">:authored_by</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="n">article</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>更多关于Message Expectations</h3>

<p><strong> 执行次数 </strong></p>

<p><code>should_receive(:xxx)</code>要求<code>xxx()</code>被调用且只调用一次, 如果希望调用若干次, 可采用下列方式</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">mock_account</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span><span class="ss">:withdraw</span><span class="p">)</span><span class="o">.</span><span class="n">exactly</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span><span class="o">.</span><span class="n">times</span>
</span><span class='line'><span class="n">network_double</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span><span class="ss">:open_connection</span><span class="p">)</span><span class="o">.</span><span class="n">at_most</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span><span class="o">.</span><span class="n">times</span>
</span><span class='line'><span class="n">network_double</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span><span class="ss">:open_connection</span><span class="p">)</span><span class="o">.</span><span class="n">at_least</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">times</span>
</span><span class='line'><span class="n">account_double</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span><span class="ss">:withdraw</span><span class="p">)</span><span class="o">.</span><span class="n">once</span>
</span><span class='line'><span class="n">account_double</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span><span class="ss">:deposit</span><span class="p">)</span><span class="o">.</span><span class="n">twice</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果期待方法不被调用,要使用<code>should_not_receive</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">network_double</span><span class="o">.</span><span class="n">should_not_receive</span><span class="p">(</span><span class="ss">:open_connection</span><span class="p">)</span>
</span><span class='line'><span class="n">network_double</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span><span class="ss">:open_connection</span><span class="p">)</span><span class="o">.</span><span class="n">never</span>              <span class="c1">#不推荐</span>
</span><span class='line'><span class="n">network_double</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span><span class="ss">:open_connection</span><span class="p">)</span><span class="o">.</span><span class="n">exactly</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">.</span><span class="n">times</span>   <span class="c1">#不推荐</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong> 指定期待的参数, <code>with()</code> </strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">### 指定一个参数, 且值为50</span>
</span><span class='line'><span class="n">account_double</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span><span class="ss">:withdraw</span><span class="p">)</span><span class="o">.</span><span class="n">with</span><span class="p">(</span><span class="mi">50</span><span class="p">)</span>
</span><span class='line'><span class="c1">### 可以指定任意个参数</span>
</span><span class='line'><span class="n">checking_account</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span><span class="ss">:transfer</span><span class="p">)</span><span class="o">.</span><span class="n">with</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="n">savings_account</span><span class="p">)</span>
</span><span class='line'><span class="c1">### 第一个参数为给定值, 第二个参数为Fixnum型任意值</span>
</span><span class='line'><span class="n">source_account</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span><span class="ss">:transfer</span><span class="p">)</span><span class="o">.</span><span class="n">with</span><span class="p">(</span><span class="n">target_account</span><span class="p">,</span> <span class="n">instance_of</span><span class="p">(</span><span class="no">Fixnum</span><span class="p">))</span>
</span><span class='line'><span class="c1">### 第一个参数可以为任意类型任意值</span>
</span><span class='line'><span class="n">source_account</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span><span class="ss">:transfer</span><span class="p">)</span><span class="o">.</span><span class="n">with</span><span class="p">(</span><span class="n">anything</span><span class="p">(),</span> <span class="mi">50</span><span class="p">)</span>
</span><span class='line'><span class="c1">### 任意类型任意数量参数</span>
</span><span class='line'><span class="n">source_account</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span><span class="ss">:transfer</span><span class="p">)</span><span class="o">.</span><span class="n">with</span><span class="p">(</span><span class="n">any_args</span><span class="p">())</span>
</span><span class='line'><span class="c1">### 不传参数</span>
</span><span class='line'><span class="n">collaborator</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span><span class="ss">:message</span><span class="p">)</span><span class="o">.</span><span class="n">with</span><span class="p">(</span><span class="n">no_args</span><span class="p">())</span>
</span><span class='line'><span class="c1">### 参数为包含/不包含给定key/value的Hash</span>
</span><span class='line'><span class="n">with</span><span class="p">(</span><span class="n">hash_including</span><span class="p">(</span><span class="s1">&#39;Electric&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;123&#39;</span><span class="p">,</span> <span class="s1">&#39;Gas&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;234&#39;</span><span class="p">))</span>
</span><span class='line'><span class="n">with</span><span class="p">(</span><span class="n">hash_not_including</span><span class="p">(</span><span class="s1">&#39;Electric&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;123&#39;</span><span class="p">,</span> <span class="s1">&#39;Gas&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;234&#39;</span><span class="p">))</span>
</span><span class='line'><span class="c1">### 正则表达式</span>
</span><span class='line'><span class="n">mock_atm</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span><span class="ss">:login</span><span class="p">)</span><span class="o">.</span><span class="n">with</span><span class="p">(</span><span class="sr">/.* User/</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong> 自定义的Argument Matchers </strong></p>

<p>自定义一个类, 然后重写<code>==(actual)</code>方法即可<br/>
也可以添加一个<code>description()</code>方法以提供失败时输出的信息</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">GreaterThanMatcher</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">expected</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@expected</span> <span class="o">=</span> <span class="n">expected</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">description</span>
</span><span class='line'>    <span class="s2">&quot;a number greater than </span><span class="si">#{</span><span class="vi">@expected</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">==</span><span class="p">(</span><span class="n">actual</span><span class="p">)</span>
</span><span class='line'>    <span class="n">actual</span> <span class="o">&gt;</span> <span class="vi">@expected</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">greater_than</span><span class="p">(</span><span class="n">floor</span><span class="p">)</span>
</span><span class='line'>  <span class="no">GreaterThanMatcher</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">floor</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">calculator</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span><span class="ss">:add</span><span class="p">)</span><span class="o">.</span><span class="n">with</span><span class="p">(</span><span class="n">greater_than</span><span class="p">(</span><span class="mi">37</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong> Throwing or Raising </strong></p>

<p><code>and_raise()</code>可以不传参/一个参数(异常类或异常类实例)<br/>
<code>and_throw()</code>传symbol</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">account_double</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span><span class="ss">:withdraw</span><span class="p">)</span><span class="o">.</span><span class="n">and_raise</span>
</span><span class='line'><span class="n">account_double</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span><span class="ss">:withdraw</span><span class="p">)</span><span class="o">.</span><span class="n">and_raise</span><span class="p">(</span><span class="no">InsufficientFunds</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">the_exception</span> <span class="o">=</span> <span class="no">InsufficientFunds</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:reason</span> <span class="o">=&gt;</span> <span class="ss">:on_hold</span><span class="p">)</span>
</span><span class='line'><span class="n">account_double</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span><span class="ss">:withdraw</span><span class="p">)</span><span class="o">.</span><span class="n">and_raise</span><span class="p">(</span><span class="n">the_exception</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">account_double</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span><span class="ss">:withdraw</span><span class="p">)</span><span class="o">.</span><span class="n">and_throw</span><span class="p">(</span><span class="ss">:insufficient_funds</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong> 按序执行 </strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">database</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span><span class="ss">:count</span><span class="p">)</span><span class="o">.</span><span class="n">with</span><span class="p">(</span><span class="s1">&#39;Roster&#39;</span><span class="p">,</span> <span class="ss">:course_id</span> <span class="o">=&gt;</span> <span class="mi">37</span><span class="p">)</span><span class="o">.</span><span class="n">ordered</span>
</span><span class='line'><span class="n">database</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span><span class="ss">:add</span><span class="p">)</span><span class="o">.</span><span class="n">with</span><span class="p">(</span><span class="n">student</span><span class="p">)</span><span class="o">.</span><span class="n">ordered</span>
</span></code></pre></td></tr></table></div></figure>


<p>只要<code>count()</code>在<code>add()</code>之前执行就会pass</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The RSpec Book笔记(五) RSpec::Expectations]]></title>
    <link href="http://blog.banban.me/blog/blog/2014/05/15/the-rspec-bookbi-ji-wu-rspec-expectations/"/>
    <updated>2014-05-15T15:17:39+08:00</updated>
    <id>http://blog.banban.me/blog/blog/2014/05/15/the-rspec-bookbi-ji-wu-rspec-expectations</id>
    <content type="html"><![CDATA[<h2>Chapter 13 RSpec::Expectations</h2>

<p><strong> assertions OR expectations </strong><br/>
BDD里, 使用expectations替代了传统测试里的assertions<br/>
虽然作用基本是一样的, 但是2者理念不同</p>

<p>传统测试我们先有了代码, 于是我们可以断言(assert)一段代码执行之后会出现生么状况<br/>
但是在BDD中, 测试之前还没有代码本体. 我们把自己化身为各种角色, 做出各种行为, 然后期待(expect)会得到某样结果</p>

<h3>13.1 should, should_not, and matchers</h3>

<p>RSpec为所有Ruby对象添加了<code>should()</code>和<code>should_not()</code>方法<br/>
每个方法可以接受一个<code>matcher</code>对象或一个包含了特定范围内的ruby操作符的ruby表达式作参数</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">result</span><span class="o">.</span><span class="n">should</span> <span class="n">equal</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码会先对<code>equal(5)</code>求值, 这是一个RSpec提供的方法, 可以返回一个matcher对象,<br/>
之后这个matcherd对象被传给<code>result.should</code>.<br/>
<code>should</code>会调用<code>matcher.matches?</code>, 并把<code>self</code>(在这里即是<code>result</code>)作为参数.<br/>
如果<code>matches?(self)</code>返回<code>true</code>, 则expectations通过, 开始执行example里下一行代码,<br/>
否则<code>should()</code>方法会向matcher索取错误信息并报<code>ExpectationNotMetError</code></p>

<h3>13.2 Built-in Matchers</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">include</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class='line'><span class="n">respond_to</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'><span class="n">raise_error</span><span class="p">(</span><span class="n">type</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong> 相等 </strong></p>

<p>对于<a href="http://blog.banban.me/blog/2014/05/14/rubyxia-de-equals-equals-equals/">ruby中的四种相等</a>, rspec提供了以下四种对应:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="n">b</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">should</span> <span class="o">===</span> <span class="n">b</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">should</span> <span class="n">eql</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">should</span> <span class="n">equal</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外还要注意<strong> 不要使用 <code>!=</code> </strong>, 而是要用RSpec里提供的<code>should_not</code>方法<br/>
因为<code>==</code>实际是调用的ruby方法, 于是
<code>actual.should == expected</code>会被解释称<code>actual.shoul. ==(expected)</code></p>

<p>而<code>actual.should != expected</code>会被解释成<code>!(actual.should.==(expected))</code><br/>
actual和expected如果不等, 则会直接报<code>ExpectationNotMetError</code>了</p>

<p><strong> 浮点数 </strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">result</span><span class="o">.</span><span class="n">should</span> <span class="n">be_close</span><span class="p">(</span><span class="mi">5</span><span class="o">.</span><span class="mi">25</span><span class="p">,</span> <span class="mi">0</span><span class="o">.</span><span class="mo">005</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong> 多行文本 </strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">result</span><span class="o">.</span><span class="n">should</span> <span class="n">match</span><span class="p">(</span><span class="sr">/this expression/</span><span class="p">)</span>
</span><span class='line'><span class="n">result</span><span class="o">.</span><span class="n">should</span> <span class="o">=~</span> <span class="sr">/this expression/</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong> 变更 </strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">expect</span> <span class="p">{</span>
</span><span class='line'>  <span class="no">User</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="ss">:role</span> <span class="o">=&gt;</span> <span class="s2">&quot;admin&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span><span class="o">.</span><span class="n">to</span> <span class="n">change</span><span class="p">{</span> <span class="no">User</span><span class="o">.</span><span class="n">admins</span><span class="o">.</span><span class="n">count</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">expect</span> <span class="p">{</span>
</span><span class='line'>  <span class="no">User</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="ss">:role</span> <span class="o">=&gt;</span> <span class="s2">&quot;admin&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span><span class="o">.</span><span class="n">to</span> <span class="n">change</span><span class="p">{</span> <span class="no">User</span><span class="o">.</span><span class="n">admins</span><span class="o">.</span><span class="n">count</span> <span class="p">}</span><span class="o">.</span><span class="n">by</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">expect</span> <span class="p">{</span>
</span><span class='line'>  <span class="no">User</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="ss">:role</span> <span class="o">=&gt;</span> <span class="s2">&quot;admin&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span><span class="o">.</span><span class="n">to</span> <span class="n">change</span><span class="p">{</span> <span class="no">User</span><span class="o">.</span><span class="n">admins</span><span class="o">.</span><span class="n">count</span> <span class="p">}</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">expect</span> <span class="p">{</span>
</span><span class='line'>  <span class="no">User</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="ss">:role</span> <span class="o">=&gt;</span> <span class="s2">&quot;admin&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span><span class="o">.</span><span class="n">to</span> <span class="n">change</span><span class="p">{</span> <span class="no">User</span><span class="o">.</span><span class="n">admins</span><span class="o">.</span><span class="n">count</span> <span class="p">}</span><span class="o">.</span><span class="n">from</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">expect</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">seller</span><span class="o">.</span><span class="n">accept</span> <span class="no">Offer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">250_000</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span><span class="o">.</span><span class="n">to</span> <span class="n">change</span><span class="p">{</span><span class="n">agent</span><span class="o">.</span><span class="n">commission</span><span class="p">}</span><span class="o">.</span><span class="n">by</span><span class="p">(</span><span class="mi">7_500</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后面那个也可以写成</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">agent</span><span class="o">.</span><span class="n">commission</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'><span class="n">seller</span><span class="o">.</span><span class="n">accept</span> <span class="no">Offer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">250_000</span><span class="p">)</span>
</span><span class='line'><span class="n">agent</span><span class="o">.</span><span class="n">commission</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="mi">7_500</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong> 报错 </strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">expect</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">account</span><span class="o">.</span><span class="n">withdraw</span> <span class="mi">75</span><span class="p">,</span> <span class="ss">:dollars</span>
</span><span class='line'><span class="p">}</span><span class="o">.</span><span class="n">to</span> <span class="n">raise_error</span><span class="p">(</span>
</span><span class='line'>  <span class="no">InsufficientFundsError</span><span class="p">,</span>
</span><span class='line'>  <span class="sr">/attempted to withdraw 75 dollars/</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>raise_error</code>可以传0个,1个或2个参数<br/>
第一个参数可以是error class, 错误信息的字符串 或者匹配错误信息的正则表达式<br/>
如果第一个参数为error class, 可以传第二个参数, String或Regexp</p>

<p><strong> 手动抛出异常 </strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">course</span> <span class="o">=</span> <span class="no">Course</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:seats</span> <span class="o">=&gt;</span> <span class="mi">20</span><span class="p">)</span>
</span><span class='line'>  <span class="mi">20</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">course</span><span class="o">.</span><span class="n">register</span> <span class="no">Student</span><span class="o">.</span><span class="n">new</span> <span class="p">}</span>
</span><span class='line'><span class="nb">lambda</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">course</span><span class="o">.</span><span class="n">register</span> <span class="no">Student</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="p">}</span><span class="o">.</span><span class="n">should</span> <span class="n">throw_symbol</span><span class="p">(</span><span class="ss">:course_full</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>参数形式与<code>raise_error</code>类似, 但是第一个参数必须为symbol, 第二个参数可为任意类型</p>

<h3>13.3 Predicate Matchers</h3>

<p>所谓predicate method, 即是以<code>?</code>并且返回一个<code>boolean</code>值的方法<br/>
在RSpec里, 可以用<code>be_xxx</code>, <code>be_a_xxx</code>, <code>be_an_xxx</code> 来描述一个predicate method</p>

<h3>13.4 Be True in the Eyes of Ruby</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">true</span><span class="o">.</span><span class="n">should</span> <span class="n">be_true</span>
</span><span class='line'><span class="mi">0</span><span class="o">.</span><span class="n">should</span> <span class="n">be_true</span>
</span><span class='line'><span class="s2">&quot;this&quot;</span><span class="o">.</span><span class="n">should</span> <span class="n">be_true</span>
</span><span class='line'>
</span><span class='line'><span class="kp">false</span><span class="o">.</span><span class="n">should</span> <span class="n">be_false</span>
</span><span class='line'><span class="kp">nil</span><span class="o">.</span><span class="n">should</span> <span class="n">be_false</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于特殊的只期待true/false的场合, 可以使用<code>equal</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">true</span><span class="o">.</span><span class="n">should</span> <span class="n">equal</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span>
</span><span class='line'><span class="kp">false</span><span class="o">.</span><span class="n">should</span> <span class="n">equal</span><span class="p">(</span><span class="kp">false</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>13.5 Have Whatever You Like</h3>

<p><strong> have_xxx </strong></p>

<p>对<code>has_xxx?</code>这类predicate method, 可以使用<code>have_xxx</code>的Predicate Matchers</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">request_parameters</span><span class="o">.</span><span class="n">has_key?</span><span class="p">(</span><span class="ss">:id</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="kp">true</span>
</span><span class='line'><span class="n">request_parameters</span><span class="o">.</span><span class="n">should</span> <span class="n">have_key</span><span class="p">(</span><span class="ss">:id</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong> Owned Collections </strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">field</span><span class="o">.</span><span class="n">players</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span><span class="o">|</span><span class="nb">p</span><span class="o">|</span> <span class="nb">p</span><span class="o">.</span><span class="n">team</span> <span class="o">==</span> <span class="n">home_team</span> <span class="p">}</span><span class="o">.</span><span class="n">length</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="mi">9</span>
</span></code></pre></td></tr></table></div></figure>


<p>够ruby, 但是不够English, 于是可以写成</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">home_team</span><span class="o">.</span><span class="n">should</span> <span class="n">have</span><span class="p">(</span><span class="mi">9</span><span class="p">)</span><span class="o">.</span><span class="n">players_on</span><span class="p">(</span><span class="n">field</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中, <code>have()</code>返回一个无法响应<code>players_on()</code>方法的matcher<br/>
之后这个matcher把<code>players_on()</code>方法代理到<code>home_team</code>上</p>

<p>这么写一来易读(从English角度), 二来可以鼓励添加诸如<code>players_on()</code>这样的有用的方法</p>

<p><strong> Unowned Collections </strong></p>

<p>对于需要描述的对象本身就是collection的情况, 需要判断其size/length</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">collection</span><span class="o">.</span><span class="n">should</span> <span class="n">have</span><span class="p">(</span><span class="mi">37</span><span class="p">)</span><span class="o">.</span><span class="n">items</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中<code>items</code>是语法糖, 后面会有进一步说明</p>

<p>同样的, String也适用, 其中<code>characters</code>也是语法糖</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;this string&quot;</span><span class="o">.</span><span class="n">should</span> <span class="n">have</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span><span class="o">.</span><span class="n">characters</span>
</span></code></pre></td></tr></table></div></figure>


<p>除了<code>have()</code>以外, 还有<code>have_at_least()</code>和<code>have_at_most()</code><br/>
<code>have_exactly()</code>与<code>have()</code>同义</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">day</span><span class="o">.</span><span class="n">should</span> <span class="n">have_exactly</span><span class="p">(</span><span class="mi">24</span><span class="p">)</span><span class="o">.</span><span class="n">hours</span>
</span><span class='line'><span class="n">dozen_bagels</span><span class="o">.</span><span class="n">should</span> <span class="n">have_at_least</span><span class="p">(</span><span class="mi">12</span><span class="p">)</span><span class="o">.</span><span class="n">bagels</span>
</span><span class='line'><span class="n">internet</span><span class="o">.</span><span class="n">should</span> <span class="n">have_at_most</span><span class="p">(</span><span class="mi">2037</span><span class="p">)</span><span class="o">.</span><span class="n">killer_social_networking_apps</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong> have()究竟如何工作的 </strong></p>

<p><code>have()</code>方法会返回一个<code>RSpec::Matchers::Have</code>实例<br/>
实例里面记录了传入<code>have()</code>的数目作为指定collection的包含元素数目的期待值</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">result</span><span class="o">.</span><span class="n">should</span> <span class="n">have</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="o">.</span><span class="n">things</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实等价于</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">result</span><span class="o">.</span><span class="n">should</span><span class="p">(</span><span class="no">Have</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="o">.</span><span class="n">things</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Have类重写了<code>method_missing</code>方法, 使其能记录自己无法响应的方法(在这里就是<code>things</code>), 并返回self<br/>
于是<code>Have.new(3).things</code>, 最终返回了一个包含期待的collection元素数目(3)以及可能的collection名字(<code>things</code>)的Have对象</p>

<p>紧接着, 这个Have对象被传递给了<code>should()</code>方法<br/>
<code>should()</code>调用<code>matcher.matches?(self)</code></p>

<p>而在<code>matches?()</code>方法里, 首先会判断目标对象(<code>result</code>)是否能响应之前纪录的<code>things</code>方法<br/>
若能相应, 则在<code>result.things</code>上调用<code>length</code>或者<code>size</code>(length优先)<br/>
此时如果<code>result.things</code>没有<code>length</code>或<code>size</code>, 就会得到一个error message
如果有<code>length</code>/<code>size</code>, 便会与Have对象里记录的数目作比较, 判断example通过或者失败</p>

<p>如果<code>result</code>无法响应<code>things</code>, 则会在<code>result</code>自身调用<code>length</code>或<code>size</code><br/>
之后的判断与上面一样,  返回错误信息或者比较数目是否相等</p>

<h3>13.6 Operator Expressions</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">result</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="mi">3</span>
</span><span class='line'><span class="n">result</span><span class="o">.</span><span class="n">should</span> <span class="o">=~</span> <span class="sr">/some regexp/</span>
</span><span class='line'><span class="n">result</span><span class="o">.</span><span class="n">should</span> <span class="n">be</span> <span class="o">&lt;</span> <span class="mi">7</span>
</span><span class='line'><span class="n">result</span><span class="o">.</span><span class="n">should</span> <span class="n">be</span> <span class="o">&lt;=</span> <span class="mi">7</span>
</span><span class='line'><span class="n">result</span><span class="o">.</span><span class="n">should</span> <span class="n">be</span> <span class="o">&gt;=</span> <span class="mi">7</span>
</span><span class='line'><span class="n">result</span><span class="o">.</span><span class="n">should</span> <span class="n">be</span> <span class="o">&gt;</span> <span class="mi">7</span>
</span></code></pre></td></tr></table></div></figure>


<p>这些会被Ruby解释成</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">result</span><span class="o">.</span><span class="n">should</span><span class="o">.</span><span class="n">=</span><span class="o">=</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="n">result</span><span class="o">.</span><span class="n">should</span><span class="o">.</span><span class="n">=</span><span class="o">~</span><span class="p">(</span><span class="sr">/some regexp/</span><span class="p">)</span>
</span><span class='line'><span class="n">result</span><span class="o">.</span><span class="n">should</span><span class="p">(</span><span class="n">be</span><span class="o">.</span><span class="n">&lt;</span><span class="p">(</span><span class="mi">7</span><span class="p">))</span>
</span><span class='line'><span class="n">result</span><span class="o">.</span><span class="n">should</span><span class="p">(</span><span class="n">be</span><span class="o">.</span><span class="n">&lt;</span><span class="o">=</span><span class="p">(</span><span class="mi">7</span><span class="p">))</span>
</span><span class='line'><span class="n">result</span><span class="o">.</span><span class="n">should</span><span class="p">(</span><span class="n">be</span><span class="o">.</span><span class="n">&gt;</span><span class="o">=</span><span class="p">(</span><span class="mi">7</span><span class="p">))</span>
</span><span class='line'><span class="n">result</span><span class="o">.</span><span class="n">should</span><span class="p">(</span><span class="n">be</span><span class="o">.</span><span class="n">&gt;</span><span class="p">(</span><span class="mi">7</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>RSpec在<code>should()</code>返回的对象上定义了<code>==</code>, <code>=~</code>, 在<code>be()</code>返回对象上定义了<code>&lt;</code>, <code>&lt;=</code>, <code>&gt;=</code>, <code>&gt;</code></p>

<h3>13.7 Generated Descriptions</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="s2">&quot;A new chess board&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="vi">@board</span> <span class="o">=</span> <span class="no">Chess</span><span class="o">::</span><span class="no">Board</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;should have 32 pieces&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="vi">@board</span><span class="o">.</span><span class="n">should</span> <span class="n">have</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span><span class="o">.</span><span class="n">pieces</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为example运行时输出的内容几乎和example是一样的, 于是上述内容也可以写成</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="s2">&quot;A new chess board&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="p">{</span> <span class="vi">@board</span> <span class="o">=</span> <span class="no">Chess</span><span class="o">::</span><span class="no">Board</span><span class="o">.</span><span class="n">new</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">specify</span> <span class="p">{</span> <span class="vi">@board</span><span class="o">.</span><span class="n">should</span> <span class="n">have</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span><span class="o">.</span><span class="n">pieces</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>
这2段代码输出的内容都是</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>A new chess board
</span><span class='line'>  should have <span class="m">32</span> pieces
</span></code></pre></td></tr></table></div></figure>


<p><code>specify()</code>和<code>it()</code>一样, 都是<code>example()</code>的方法别名</p>

<h3>13.8 Subjectivity</h3>

<p><code>subject()</code>相当于在<code>before</code>里创建一个当前example的subject(被描述的对象)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">Person</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">subject</span> <span class="p">{</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:birthdate</span> <span class="o">=&gt;</span> <span class="mi">19</span><span class="o">.</span><span class="n">years</span><span class="o">.</span><span class="n">ago</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">specify</span> <span class="p">{</span> <span class="n">subject</span><span class="o">.</span><span class="n">should</span> <span class="n">be_eligible_to_vote</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>一旦<code>subject</code>被声明了, <code>should()</code>和<code>should_not()</code>都会被代理到<code>subject</code>上<br/>
于是上面的代码还可以写作</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">Person</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">subject</span> <span class="p">{</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:birthdate</span> <span class="o">=&gt;</span> <span class="mi">19</span><span class="o">.</span><span class="n">years</span><span class="o">.</span><span class="n">ago</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">be_eligible_to_vote</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果创建的subject在执行<code>new</code>时不需要参数, <code>subject</code>的声明也可以不写, 直接写作</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">RSpecUser</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">be_happy</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby下的 ===, ==, Eql?, Equal?]]></title>
    <link href="http://blog.banban.me/blog/blog/2014/05/14/rubyxia-de-equals-equals-equals/"/>
    <updated>2014-05-14T16:18:04+08:00</updated>
    <id>http://blog.banban.me/blog/blog/2014/05/14/rubyxia-de-equals-equals-equals</id>
    <content type="html"><![CDATA[<h3>=== case equality</h3>

<p>严格说来, 这个其实跟另外三个不属于一类.</p>

<p><code>a === b</code> 相当于 &ldquo;如果我有一个贴了a标签的抽屉, 那么把b放到这个抽屉里是否可行?&rdquo;</p>

<p>作为case equality operator, 其首要作用自然是在<code>when/case</code>里, 作为判断进入某个分支的依据</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="mi">5</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="n">a</span>
</span><span class='line'><span class="k">when</span> <span class="nb">Integer</span>
</span><span class='line'>  <span class="s2">&quot;case Integer&quot;</span>
</span><span class='line'><span class="k">when</span> <span class="mi">5</span>
</span><span class='line'>  <span class="s2">&quot;case 5&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码其实是会返回<code>"case Integer"</code>的, 因为<code>Integer</code>类重写了<code>===</code>方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="go">2.1.1 :043 &gt; Integer === 5</span>
</span><span class='line'><span class="go"> =&gt; true </span>
</span></code></pre></td></tr></table></div></figure>


<p>相应的, 重写了<code>===</code>的还有<code>Range</code>, <code>Regexp</code>等等</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="go">2.1.1 :054 &gt; (1..5) === 5</span>
</span><span class='line'><span class="go"> =&gt; true </span>
</span><span class='line'><span class="go">2.1.1 :055 &gt; (1...5) === 5</span>
</span><span class='line'><span class="go"> =&gt; false </span>
</span><span class='line'><span class="go">2.1.1 :058 &gt; /(a|e|i|o|u)/ === &quot;hello&quot;</span>
</span><span class='line'><span class="go"> =&gt; true  </span>
</span></code></pre></td></tr></table></div></figure>


<p>对于<code>Object#===</code>, 事实上等价于<code>Object#==</code>.<br/>
但是对Object的子类, <code>===</code>一般会被重写, 使其在条件表达式里有意义.</p>

<p>这里可以拿<code>&lt;=&gt;</code>方法做个类比</p>

<p>比如我们自己定义了个<code>User</code>类, 如果直接就<code>User.all.sort</code>, 是不可以的,<br/>
如果想这么用, 你就需要首先在<code>User</code>里面定义一个<code>&lt;=&gt;</code>方法用于比较2个user对象</p>

<p>稍微有点不同的是, 因为<code>===</code>是定义在<code>Object</code>里的<br/>
所以即便对自己定义的类里面不重写<code>===</code>方法, 一样可以对其使用<code>case/when</code><br/>
但是这样会调用Object#===, 可能不会得到自定义类需要的结果.</p>

<p>依然用上面的例子来说
如果<code>Integer</code>里面没有重写<code>===</code>方法, 那么得到的返回值就不再是&#8221;case Integer&#8221;,而是&#8221;case 5&#8221;了</p>

<h3>==</h3>

<p><code>==</code>是最为常用的用于比较两个对象值是否相等的方法</p>

<p><code>a == b</code>相当于判断&#8221;a的值与b的值相同吗&#8221;</p>

<p><code>==</code>方法经常被Object子类重写以满足其自身需求</p>

<h3>equal?</h3>

<p><code>equal?</code>方法用来判断2个对象是否是同一个对象</p>

<p><code>a.equal? b</code>相当于判断&#8221;a就是b吗&#8221;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="go">2.1.1 :005 &gt; &quot;a&quot; == &quot;a&quot;</span>
</span><span class='line'><span class="go"> =&gt; true </span>
</span><span class='line'><span class="go">2.1.1 :006 &gt; &quot;a&quot;.equal? &quot;a&quot;</span>
</span><span class='line'><span class="go"> =&gt; false </span>
</span><span class='line'><span class="go">2.1.1 :007 &gt; :a.equal? :a</span>
</span><span class='line'><span class="go"> =&gt; true </span>
</span></code></pre></td></tr></table></div></figure>


<p>与<code>==</code>不同, <code>equal?</code>不应该被子类重写</p>

<h3>eql?</h3>

<p>与<code>==</code>类似, 但是可以看做是更严格的<code>==</code><br/>
在<code>Object</code>里, <code>==</code>与<code>eql?</code>是同意, 但是很多子类会重写<code>eql?</code>以提供更严格的比较, 比如:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="go">2.1.1 :010 &gt; 1 == 1</span>
</span><span class='line'><span class="go"> =&gt; true </span>
</span><span class='line'><span class="go">2.1.1 :011 &gt; 1 == 1.0</span>
</span><span class='line'><span class="go"> =&gt; true </span>
</span><span class='line'><span class="go">2.1.1 :012 &gt; 1.eql? 1.0</span>
</span><span class='line'><span class="go"> =&gt; false </span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The RSpec Book笔记(四) Code Examples(2)]]></title>
    <link href="http://blog.banban.me/blog/blog/2014/05/14/the-rspec-bookbi-ji-si-rspecxiang-jie-2/"/>
    <updated>2014-05-14T10:55:35+08:00</updated>
    <id>http://blog.banban.me/blog/blog/2014/05/14/the-rspec-bookbi-ji-si-rspecxiang-jie-2</id>
    <content type="html"><![CDATA[<h3>12.4 Helper Methods</h3>

<p>我们可以在example group中定义helper方法，这样定义的helper方法可以在example group中的每个code example里使用。</p>

<p>例如:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">Thing</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;should do something when ok&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">thing</span> <span class="o">=</span> <span class="no">Thing</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="n">thing</span><span class="o">.</span><span class="n">set_status</span><span class="p">(</span><span class="s1">&#39;ok&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">thing</span><span class="o">.</span><span class="n">do_fancy_stuff</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">:move</span> <span class="o">=&gt;</span> <span class="s1">&#39;left&#39;</span><span class="p">,</span> <span class="ss">:obstacles</span> <span class="o">=&gt;</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;should do something else when not so good&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">thing</span> <span class="o">=</span> <span class="no">Thing</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="n">thing</span><span class="o">.</span><span class="n">set_status</span><span class="p">(</span><span class="s1">&#39;not so good&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">thing</span><span class="o">.</span><span class="n">do_fancy_stuff</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">:move</span> <span class="o">=&gt;</span> <span class="s1">&#39;left&#39;</span><span class="p">,</span> <span class="ss">:obstacles</span> <span class="o">=&gt;</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>可以把<code>thing = Thing.new</code>和<code>thing.set_status('ok')</code>部分提取出来,改成:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">Thing</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create_thing</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
</span><span class='line'>    <span class="n">thing</span> <span class="o">=</span> <span class="no">Thing</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="n">thing</span><span class="o">.</span><span class="n">set_status</span><span class="p">(</span><span class="n">options</span><span class="o">[</span><span class="ss">:status</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="n">thing</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;should do something when ok&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">thing</span> <span class="o">=</span> <span class="n">create_thing</span><span class="p">(</span><span class="ss">:status</span> <span class="o">=&gt;</span> <span class="s1">&#39;ok&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">thing</span><span class="o">.</span><span class="n">do_fancy_stuff</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">:move</span> <span class="o">=&gt;</span> <span class="s1">&#39;left&#39;</span><span class="p">,</span> <span class="ss">:obstacles</span> <span class="o">=&gt;</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;should do something else when not so good&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">thing</span> <span class="o">=</span> <span class="n">create_thing</span><span class="p">(</span><span class="ss">:status</span> <span class="o">=&gt;</span> <span class="s1">&#39;not so good&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">thing</span><span class="o">.</span><span class="n">do_fancy_stuff</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">:move</span> <span class="o">=&gt;</span> <span class="s1">&#39;left&#39;</span><span class="p">,</span> <span class="ss">:obstacles</span> <span class="o">=&gt;</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>还可以进一步提取为(但是个人感觉这么做意义不大, 纯属是为了使其更符合英语语法结构):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">Thing</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">given_thing_with</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
</span><span class='line'>    <span class="k">yield</span> <span class="no">Thing</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">thing</span><span class="o">|</span>
</span><span class='line'>      <span class="n">thing</span><span class="o">.</span><span class="n">set_status</span><span class="p">(</span><span class="n">options</span><span class="o">[</span><span class="ss">:status</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;should do something when ok&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">given_thing_with</span><span class="p">(</span><span class="ss">:status</span> <span class="o">=&gt;</span> <span class="s1">&#39;ok&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">thing</span><span class="o">|</span>
</span><span class='line'>      <span class="n">thing</span><span class="o">.</span><span class="n">do_fancy_stuff</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">:move</span> <span class="o">=&gt;</span> <span class="s1">&#39;left&#39;</span><span class="p">,</span> <span class="ss">:obstacles</span> <span class="o">=&gt;</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>      <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;should do something else when not so good&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">given_thing_with</span><span class="p">(</span><span class="ss">:status</span> <span class="o">=&gt;</span> <span class="s1">&#39;not so good&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">thing</span><span class="o">|</span>
</span><span class='line'>      <span class="n">thing</span><span class="o">.</span><span class="n">do_fancy_stuff</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">:move</span> <span class="o">=&gt;</span> <span class="s1">&#39;left&#39;</span><span class="p">,</span> <span class="ss">:obstacles</span> <span class="o">=&gt;</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>      <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><strong> 共享Helper Methods </strong></p>

<p>为了能够在example groups之间共享Helper Methods, 我们可以将Helper Methods定义在module里<br/>
并在需要使用这些方法的时候, 在example groups里面include相应的module.</p>

<p>例如:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">UserExampleHelpers</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create_valid_user</span>
</span><span class='line'>    <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:email</span> <span class="o">=&gt;</span> <span class="s1">&#39;email@example.com&#39;</span><span class="p">,</span> <span class="ss">:password</span> <span class="o">=&gt;</span> <span class="s1">&#39;shhhhh&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create_invalid_user</span>
</span><span class='line'>    <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:password</span> <span class="o">=&gt;</span> <span class="s1">&#39;shhhhh&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">UserExampleHelpers</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;does something when it is valid&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">user</span> <span class="o">=</span> <span class="n">create_valid_user</span>
</span><span class='line'>    <span class="c1"># do stuff</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;does something when it is not valid&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">user</span> <span class="o">=</span> <span class="n">create_invalid_user</span>
</span><span class='line'>    <span class="c1"># do stuff</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果某个module中的helper methods, 在所有的example group里都用得上<br/>
还可以把这个module通过配置全局加载</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">include</span><span class="p">(</span><span class="no">UserExampleHelpers</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>12.5 Shared Examples</h3>

<p>有时我们想要某个class的多个不同实例表现出相同的行为<br/>
这是我么可以采用shared example group将其行为描述出来<br/>
然后在需要的地方include这个example group</p>

<p>这里我们会用到2个方法:</p>

<p><strong> shared_examples_for </strong>  用来用来声明shared example group</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">shared_examples_for</span> <span class="s2">&quot;any pizza&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;tastes really good&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="vi">@pizza</span><span class="o">.</span><span class="n">should</span> <span class="n">taste_really_good</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong> it_behaves_like </strong> 用来include声明过的shared example group</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="s2">&quot;New York style thin crust pizza&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="vi">@pizza</span> <span class="o">=</span> <span class="no">Pizza</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:region</span> <span class="o">=&gt;</span> <span class="s1">&#39;New York&#39;</span><span class="p">,</span> <span class="ss">:style</span> <span class="o">=&gt;</span> <span class="s1">&#39;thin crust&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it_behaves_like</span> <span class="s2">&quot;any pizza&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;has a really great sauce&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="vi">@pizza</span><span class="o">.</span><span class="n">should</span> <span class="n">have_a_really_great_sauce</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="s2">&quot;Chicago style stuffed pizza&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="vi">@pizza</span> <span class="o">=</span> <span class="no">Pizza</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:region</span> <span class="o">=&gt;</span> <span class="s1">&#39;Chicago&#39;</span><span class="p">,</span> <span class="ss">:style</span> <span class="o">=&gt;</span> <span class="s1">&#39;stuffed&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it_behaves_like</span> <span class="s2">&quot;any pizza&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;has a ton of cheese&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="vi">@pizza</span><span class="o">.</span><span class="n">should</span> <span class="n">have_a_ton_of_cheese</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>it_hehaves_like</code>方法会生成一个名为behaves like xxx的嵌套group(nested example group)<br/>
传入<code>it_hehaves_like</code>的代码块会在这个嵌套group里执行</p>

<p>于是, 上述代码运行时会得到以下输出内容:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">New</span> <span class="no">York</span> <span class="n">style</span> <span class="n">thin</span> <span class="n">crust</span> <span class="n">pizza</span>
</span><span class='line'>  <span class="n">has</span> <span class="n">a</span> <span class="n">really</span> <span class="n">great</span> <span class="n">sauce</span>
</span><span class='line'>  <span class="n">behaves</span> <span class="n">like</span> <span class="n">any</span> <span class="n">pizza</span>
</span><span class='line'>    <span class="n">tastes</span> <span class="n">really</span> <span class="n">good</span>
</span><span class='line'>    <span class="n">is</span> <span class="n">available</span> <span class="n">by</span> <span class="n">the</span> <span class="n">slice</span>
</span><span class='line'>
</span><span class='line'><span class="no">Chicago</span> <span class="n">style</span> <span class="n">stuffed</span> <span class="n">pizza</span>
</span><span class='line'>  <span class="n">has</span> <span class="n">a</span> <span class="n">ton</span> <span class="n">of</span> <span class="n">cheese</span>
</span><span class='line'>  <span class="n">behaves</span> <span class="n">like</span> <span class="n">any</span> <span class="n">pizza</span>
</span><span class='line'>    <span class="n">tastes</span> <span class="n">really</span> <span class="n">good</span>
</span><span class='line'>    <span class="n">is</span> <span class="n">available</span> <span class="n">by</span> <span class="n">the</span> <span class="n">slice</span>
</span></code></pre></td></tr></table></div></figure>


<h3>12.6 Nested Example Groups</h3>

<p>inner group可以看做是outer group的一个子类<br/>
所以在outer group里声明的任何helper method, before/after<br/>
在inner group里都依然可用</p>

<p>nested example group里的代码执行顺序:</p>

<blockquote><ol>
<li> Outer before</li>
<li> Inner before</li>
<li> Example</li>
<li> Inner after</li>
<li> Outer after</li>
</ol>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为class Method添加alias_method]]></title>
    <link href="http://blog.banban.me/blog/blog/2014/05/13/wei-class-methodtian-jia-alias-method/"/>
    <updated>2014-05-13T16:21:15+08:00</updated>
    <id>http://blog.banban.me/blog/blog/2014/05/13/wei-class-methodtian-jia-alias-method</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ChatTeamTopic</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">acts_as_paranoid</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>    <span class="n">alias_method</span> <span class="ss">:orig_delete_all</span><span class="p">,</span> <span class="ss">:delete_all</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">delete_all</span><span class="p">(</span><span class="n">conditions</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>      <span class="n">clear_notifications</span><span class="p">(</span><span class="n">conditions</span><span class="p">)</span> <span class="k">if</span> <span class="n">conditions</span><span class="o">.</span><span class="n">present?</span>
</span><span class='line'>      <span class="n">orig_delete_all</span><span class="p">(</span><span class="n">conditions</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">clear_notifications</span><span class="p">(</span><span class="n">conditions</span><span class="p">)</span>
</span><span class='line'>      <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为apache添加反向代理,在https Server下使用faye]]></title>
    <link href="http://blog.banban.me/blog/blog/2014/05/05/zai-https-serverxia-shi-yong-faye/"/>
    <updated>2014-05-05T15:34:58+08:00</updated>
    <id>http://blog.banban.me/blog/blog/2014/05/05/zai-https-serverxia-shi-yong-faye</id>
    <content type="html"><![CDATA[<p>前段时间为正在着手的项目添加了基于faye的即时聊天功能  <br/>
开发时参照了<a href="http://railscasts.com/episodes/260-messaging-with-faye?view=asciicast">RailsCasts的教程</a>, 还算比较顺利<br/>
但是部署到测试服务器时候, 发生了些问题</p>

<p>测试服务器使用了https server, 所有请求都走在https下<br/>
但是我的faye server跑在http下, 导致faye.js无法加载, faye client也无法创建</p>

<p>几经折腾, 最后采用apache添加了reverse proxy办法, 把https下的对faye的请求代理到http下faye server实际位置<br/>
以下为具体操作</p>

<p>为apache添加反向代理</p>

<figure class='code'><figcaption><span>加载proxy和proxy_http module</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo a2enmod proxy
</span><span class='line'><span class="nv">$ </span>sudo a2enmod proxy_http
</span></code></pre></td></tr></table></div></figure>


<p>修改apache.conf</p>

<figure class='code'><figcaption><span>apache.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='apacheconf'><span class='line'><span class="nt">&lt;VirtualHost</span> <span class="s">*:80</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nb">ServerName</span> myapp.example.com
</span><span class='line'>    <span class="nb">RewriteEngine</span> <span class="k">On</span>
</span><span class='line'>    <span class="nb">RewriteRule</span> (.*) https://%{HTTP_HOST}%{REQUEST_URI} [L,R=permanent]
</span><span class='line'><span class="nt">&lt;/VirtualHost&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c"># Provide an HTTPS entry point as well but one that will not spin up a second rails instance</span>
</span><span class='line'><span class="c"># but rather redirect traffic accordingly</span>
</span><span class='line'><span class="nt">&lt;VirtualHost</span> <span class="s">*:443</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nb">ServerName</span> myapp.example.com
</span><span class='line'>    <span class="nb">DocumentRoot</span> <span class="sx">/home/hanbing/work/svn/college/trunk/public</span>
</span><span class='line'>    <span class="nt">&lt;Directory</span> <span class="s">/home/hanbing/work/svn/college/trunk/public</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nb">Require</span> <span class="k">all</span> granted
</span><span class='line'>      <span class="nb">Order</span> allow,deny
</span><span class='line'>      <span class="nb">AllowOverride</span> <span class="k">all</span>
</span><span class='line'>      <span class="nb">Allow</span> from <span class="k">all</span>
</span><span class='line'>      <span class="c"># MultiViews must be turned off.</span>
</span><span class='line'>      <span class="c">#Options -MultiViews</span>
</span><span class='line'>    <span class="nt">&lt;/Directory&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">SSLEngine</span> <span class="k">on</span>
</span><span class='line'>    <span class="nb">SSLOptions</span> +StrictRequire
</span><span class='line'>    <span class="nb">SSLCipherSuite</span> <span class="k">ALL</span>:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP:+eNULL
</span><span class='line'>    <span class="nb">SSLCertificateFile</span> <span class="sx">/etc/apache2/certs/myapp.example.com.crt</span>
</span><span class='line'>    <span class="nb">SSLCertificateKeyFile</span> <span class="sx">/etc/apache2/certs/myapp.example.com.key</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">ProxyPass</span> <span class="sx">/faye.js</span> http://127.0.0.1:9292/faye.js
</span><span class='line'>    <span class="nb">ProxyPassReverse</span> <span class="sx">/faye.js</span> http://127.0.0.1:9292/faye.js
</span><span class='line'>
</span><span class='line'>    <span class="nb">ProxyPass</span> <span class="sx">/faye</span> http://127.0.0.1:9292/faye
</span><span class='line'>    <span class="nb">ProxyPassReverse</span> <span class="sx">/faye</span> http://127.0.0.1:9292/faye
</span><span class='line'><span class="nt">&lt;/VirtualHost&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在controller里添加</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@faye_server</span> <span class="o">=</span>  <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">ssl?</span>
</span><span class='line'>                  <span class="n">request</span><span class="o">.</span><span class="n">protocol</span> <span class="o">&lt;&lt;</span> <span class="n">request</span><span class="o">.</span><span class="n">host_with_port</span>
</span><span class='line'>                <span class="k">else</span>
</span><span class='line'>                  <span class="n">request</span><span class="o">.</span><span class="n">protocol</span> <span class="o">&lt;&lt;</span> <span class="n">request</span><span class="o">.</span><span class="n">host</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;:9292&quot;</span>
</span><span class='line'>                <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>创建faye client</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="n">javascript_include_tag</span> <span class="vi">@faye_server</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;/faye.js&quot;</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt;</span>
</span><span class='line'><span class="x">  var faye = new Faye.Client(&quot;</span><span class="cp">&lt;%=</span> <span class="vi">@faye_server</span> <span class="cp">%&gt;</span><span class="x">/faye&quot;);</span>
</span><span class='line'>
</span><span class='line'><span class="x">  faye.subscribe(&#39;/chat/new&#39;, function (data) {</span>
</span><span class='line'><span class="x">    $(&quot;chat_list&quot;).insert({bottom: data[&quot;chat_log&quot;].toString()});</span>
</span><span class='line'>
</span><span class='line'><span class="x">    var post = $(&quot;chat_list&quot;).childElements().last();</span>
</span><span class='line'>
</span><span class='line'><span class="x">    if(data[&quot;user_id&quot;].toString() != &quot;</span><span class="cp">&lt;%=</span> <span class="n">current_user</span><span class="o">.</span><span class="n">id</span> <span class="cp">%&gt;</span><span class="x">&quot;){</span>
</span><span class='line'><span class="x">      post.removeClassName(&quot;my-post&quot;);</span>
</span><span class='line'><span class="x">      post.addClassName(&quot;member-post&quot;)</span>
</span><span class='line'><span class="x">    }</span>
</span><span class='line'><span class="x">    var objDiv = $(&quot;chat_list&quot;);</span>
</span><span class='line'><span class="x">    objDiv.scrollTop = objDiv.scrollHeight;    </span>
</span><span class='line'><span class="x">    new Effect.Highlight(post.id);</span>
</span><span class='line'><span class="x">    $(&quot;errors&quot;).hide();</span>
</span><span class='line'>
</span><span class='line'><span class="x">  });</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The RSpec Book笔记(三) Code Examples(1)]]></title>
    <link href="http://blog.banban.me/blog/blog/2014/04/30/the-rspec-bookbi-ji-san-rspecxiang-jie/"/>
    <updated>2014-04-30T11:55:59+08:00</updated>
    <id>http://blog.banban.me/blog/blog/2014/04/30/the-rspec-bookbi-ji-san-rspecxiang-jie</id>
    <content type="html"><![CDATA[<h1>Part III RSpec</h1>

<h2>Chapter 12 Code Examples</h2>

<h3>12.1 Describe It!</h3>

<p><strong> 名词解释 </strong></p>

<blockquote><ul>
<li><strong> subject code </strong>  以RSpec描述出其行为的代码</li>
<li><strong> expectation </strong>   等同于Assertion(断言)</li>
<li><strong> code example </strong>  等同于Test method,用来展示<strong> subject code </strong>的作用,并通过<strong> expectation </strong>表现其行为</li>
<li><strong> example group </strong> 等同于Test case, 一组<strong> code example </strong></li>
<li><strong> spec </strong>          spec文件, 包含一个或多个<strong> example group </strong></li>
</ul>
</blockquote>

<p>例如:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="s2">&quot;A new Account&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;should have a balance of 0&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">account</span> <span class="o">=</span> <span class="no">Account</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="n">account</span><span class="o">.</span><span class="n">balance</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="no">Money</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="ss">:USD</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><code>describe</code>方法定义了一个<strong> example group </strong><br/>
<code>describe</code>传入的字符串代表我们要描述的系统的<a href="http://www.iciba.com/facet">facet</a>(一个新账户) <br/>
<code>it</code>方法定义<strong> code example </strong>, 传入的字符串用来描述我们所关心的facet的行为(余额应为0)<br/>
在传入<code>it</code>的block中使用了<strong> expectation </strong> (<code>account.balance.should == Money.new(0, :USD)</code>)</p>

<p><strong> describe 方法 </strong></p>

<p>参数有以下几种形式:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="s2">&quot;A User&quot;</span> <span class="p">{</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span> <span class="p">}</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="n">A</span> <span class="no">User</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">User</span> <span class="p">{</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span> <span class="p">}</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="no">User</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">User</span><span class="p">,</span> <span class="s2">&quot;with no roles assigned&quot;</span> <span class="p">{</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span> <span class="p">}</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="no">User</span> <span class="n">with</span> <span class="n">no</span> <span class="n">roles</span> <span class="n">assigned</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">User</span><span class="p">,</span> <span class="s2">&quot;should require password length between 5 and 40&quot;</span> <span class="p">{</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span> <span class="p">}</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="no">User</span> <span class="n">should</span> <span class="nb">require</span> <span class="n">password</span> <span class="n">length</span> <span class="n">between</span> <span class="mi">5</span> <span class="ow">and</span> <span class="mi">40</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中第一个参数可以是class\module或字符串<br/>
若为class\module并且ExampleGroup被包含在module里<br/>
则output会连module名一起输出</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Authentication</span>
</span><span class='line'>  <span class="n">describe</span> <span class="no">User</span><span class="p">,</span> <span class="s2">&quot;with no roles assigned&quot;</span> <span class="k">do</span>
</span></code></pre></td></tr></table></div></figure>


<p>会输出<code>Authentication::User with no roles assigned</code></p>

<p>第二个参数为字符串, 可不填</p>

<p>我们也可以嵌套example groups</p>

<p>例如:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">describe</span> <span class="s2">&quot;with no roles assigned&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;is not allowed to view protected content&quot;</span> <span class="k">do</span>
</span></code></pre></td></tr></table></div></figure>


<p>会输出:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span>
</span><span class='line'>  <span class="n">with</span> <span class="n">no</span> <span class="n">roles</span> <span class="n">assigned</span>
</span><span class='line'>    <span class="n">is</span> <span class="ow">not</span> <span class="n">allowed</span> <span class="n">to</span> <span class="n">view</span> <span class="kp">protected</span> <span class="n">content</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><strong> context方法 </strong></p>

<p>context是describe方法的别名,一般倾向于用describe描述事物, 用context表述背景(条件) <br/>
于是上面的例子一般来说会写作:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">context</span> <span class="s2">&quot;with no roles assigned&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;is not allowed to view protected content&quot;</span> <span class="k">do</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><strong> it 方法 </strong></p>

<p>与describe方法类似, it可接收的参数包括一个单独的字符串,一个可选的hash和一个可选的block <br/>
其字符串参数若为以&#8217;it&#8217;开头的一句话, 则代表这句话的详情会通过block里的代码表示出来.</p>

<p>例子:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">Stack</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="vi">@stack</span> <span class="o">=</span> <span class="no">Stack</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="vi">@stack</span><span class="o">.</span><span class="n">push</span> <span class="ss">:item</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s2">&quot;#peek&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;should return the top element&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@stack</span><span class="o">.</span><span class="n">peek</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="ss">:item</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;should not remove the top element&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@stack</span><span class="o">.</span><span class="n">peek</span>
</span><span class='line'>      <span class="vi">@stack</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s2">&quot;#pop&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;should return the top element&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@stack</span><span class="o">.</span><span class="n">pop</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="ss">:item</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;should remove the top element&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@stack</span><span class="o">.</span><span class="n">pop</span>
</span><span class='line'>      <span class="vi">@stack</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上代码通过example group的嵌套, 将<code>peak()</code>和<code>pop()</code>2个group分隔开<br/>
如果运行时加上<code>--format documentation</code>参数的, 会得到如下输出:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Stack
</span><span class='line'>  <span class="c">#peek</span>
</span><span class='line'>    should <span class="k">return</span> the top element
</span><span class='line'>    should not remove the top element
</span><span class='line'>  <span class="c">#pop</span>
</span><span class='line'>    should <span class="k">return</span> the top element
</span><span class='line'>    should remove the top element
</span><span class='line'>
</span><span class='line'>Finished in 0.00154 seconds
</span><span class='line'><span class="m">4</span> examples, <span class="m">0</span> failures
</span></code></pre></td></tr></table></div></figure>


<h3>12.2 Pending Examples</h3>

<ol>
<li><p><strong> 用于代码还未实现的 </strong></p>

<p>在<code>it</code>方法里不传代码块, 则此code example会被当做pending的example</p>

<pre><code>describe Newspaper do
  it "should be read all over"
end
</code></pre>

<p>运行RSpec时, 会在output里有:</p>

<pre><code>Newspaper
  should be read all over (PENDING: Not Yet Implemented)  

Pending:
  Newspaper should be read all over
    # Not Yet Implemented
    # ./newspaper_spec.rb:17
</code></pre>

<p>可用于列出还未实现的功能</p></li>
<li><p><strong> 用于已有代码但是需要修改的 </strong></p>

<p>加入pending声明, 不追加代码块, 则声明后的代码不会被执行</p>

<pre><code>describe "onion rings" do
  it "should not be mixed with french fries" do
    pending "cleaning out the fryer"
    fryer_with(:onion_rings).should_not include(:french_fry)
  end
end
</code></pre>

<p>可以使测试依然通过而不必将原先内容注释掉</p></li>
<li><p><strong> 用于bug report </strong></p>

<p>如果此bug当前并不想修改<br/>
可以把有问题的代码置于pending下, 避免其被执行(类似上面2.的情形)</p>

<p>传入pending的代码块会被执行, 若其不通过或者报错, 则会像普通pending<br/>
否则RSpec会报<code>PendingExampleFixedError</code>, 提醒你此处无缘无故pending了<br/>
然后即可将pending移除, 因为这些代码已经可以通过测试</p>

<pre><code>describe "an empty array" do
  it "should be empty" do
    pending("bug report 18976") do
      [].should be_empty
    end
  end
end
</code></pre>

<p>以上代码执行后会有如下输出:</p>

<pre><code>F

Failures:
  1) an empty array should be empty FIXED
    Expected pending 'bug report 18976' to fail. No Error was raised.
    # ./pending_fixed.rb:4

Finished in 0.00088 seconds
1 example, 1 failure
</code></pre></li>
</ol>


<h3>12.3 Hooks: Before, After, and Around</h3>

<ol>
<li><p><strong> before(:each) </strong><br/>
对于example group中的每个example, 都会重新运行一遍</p></li>
<li><p><strong> before(:all) </strong><br/>
只在自身对象的实例中运行一次(This gets run once and only once in its own instance of Object),<br/>
但在其中的实例变量会被copy到每个example下</p>

<p>需要注意before(:all)有可能造成不同group之间的状态共享,<br/>
所以除非特殊情况(如需打开网络连接), 尽量都用before(:each)</p></li>
<li><p><strong> after(:each) </strong><br/>
在其中的代码一定会执行, 即使examples或着其他hooks里的代码无法通过甚至报错<br/>
after(:each)可用于恢复全局变量状态</p>

<pre><code>before(:each) do
  @original_global_value = $some_global_value
  $some_global_value = temporary_value
end

after(:each) do
  $some_global_value = @original_global_value
end
</code></pre></li>
<li><p><strong> after(:all) </strong><br/>
不常用, 可用于最后关闭诸如DB连接等</p></li>
<li><p><strong> around(:each) </strong><br/>
会把当前运行的example当做代码块传入around, 然后可运行example.run<br/>
可用于database transactions:</p>

<pre><code>around do |example|
  DB.transaction { example.run }
end
</code></pre>

<p>也可以把example作为代码块直接传给around里的方法, 如:</p>

<pre><code>around do |example|
  ansaction &amp;example
end
</code></pre>

<p>除此之外也可以用于类似下面这种情况:</p>

<pre><code>around do |example|
  begin
    # do something
    example.run
  ensure 
    # do something else
  end
end
</code></pre>

<p>但是上面这种情况会降低代码可读性, 所以如遇以上情况还是使用before/after为好:</p>

<pre><code>before { do_some_stuff_before }
after { do_some_stuff_after } 
</code></pre></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The RSpec Book笔记(二) 初窥cucumber与RSpec]]></title>
    <link href="http://blog.banban.me/blog/blog/2014/04/29/the-rspec-bookbi-ji-er-chu-kui-cucumberyu-rspec/"/>
    <updated>2014-04-29T10:38:36+08:00</updated>
    <id>http://blog.banban.me/blog/blog/2014/04/29/the-rspec-bookbi-ji-er-chu-kui-cucumberyu-rspec</id>
    <content type="html"><![CDATA[<h3>Describing Features</h3>

<p>将特性(features)整理成若干用户故事(User Stories), 可以采用<code>role + action</code>的形式作为故事的标题.<br/>
故事里不需要包含太多细节, 详细内容可以在选定好选取哪些故事用作发布以及哪次迭代时发布后, 再行考虑.</p>

<blockquote><ul>
<li><strong> Code-breaker starts game </strong> The code-breaker opens a shell, types a
command, and sees a welcome message and a prompt to enter
the first guess.</li>
<li><strong> Code-breaker submits guess </strong> The code-breaker enters a guess, and
the system replies by marking the guess according to the marking
algorithm.</li>
</ul>
</blockquote>

<p>关于User Stroies, 可以看下iHover大大的<a href="http://ihower.tw/blog/archives/2090">User Stories (1) 什麼是 User Story?</a></p>

<p>User Story需要拥有以下特性:</p>

<blockquote><ul>
<li><strong> Have business value </strong></li>
<li><strong> Be testable </strong></li>
<li><strong> Be small enough to implement in one iteration </strong></li>
</ul>
</blockquote>

<p>在项目里添加一个<code>features</code>目录,然后在<code>teatures</code>下添加<code>support</code>目录,<br/>
在<code>support</code>目录里添加<code>env.rb</code>文件(其实*.rb便可), 这样cucumber会知道我们正在用ruby</p>

<p>在里<code>features</code>面创建一个<code>codebreaker_submits_guess.feature</code>文件</p>

<figure class='code'><figcaption><span>Scenario Example - codebreaker_submits_guess.feature </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cucumber'><span class='line'><span class="k">Feature:</span><span class="nf"> code-breaker submits guess</span>
</span><span class='line'><span class="nf">  As a code-breaker</span>
</span><span class='line'><span class="nf">  I want to submit a guess</span>
</span><span class='line'><span class="nf">  So that I can try to break the code</span>
</span><span class='line'>
</span><span class='line'><span class="nf">  </span><span class="k">Scenario:</span><span class="nf"> all exact matches</span>
</span><span class='line'><span class="k">    Given </span><span class="nf">the secret code is &quot;</span><span class="s">1234</span><span class="nf">&quot;</span>
</span><span class='line'><span class="nf">    </span><span class="k">When </span><span class="nf">I guess &quot;</span><span class="s">1234</span><span class="nf">&quot;</span>
</span><span class='line'><span class="nf">    </span><span class="k">Then </span><span class="nf">the mark should be &quot;</span><span class="s">++++</span><span class="nf">&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Scenario Outline Example - codebreaker_submits_guess.feature </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='cucumber'><span class='line'><span class="k">Feature:</span><span class="nf"> code-breaker submits guess</span>
</span><span class='line'><span class="nf">  As a code-breaker</span>
</span><span class='line'><span class="nf">  I want to submit a guess</span>
</span><span class='line'><span class="nf">  So that I can try to break the code</span>
</span><span class='line'>
</span><span class='line'><span class="nf">  </span><span class="k">Scenario Outline:</span><span class="nf"> submit guess</span>
</span><span class='line'><span class="k">    Given </span><span class="nf">the secret code is &quot;</span><span class="nv">&lt;code&gt;</span><span class="nf">&quot;</span>
</span><span class='line'><span class="nf">    </span><span class="k">When </span><span class="nf">I guess &quot;</span><span class="nv">&lt;guess&gt;</span><span class="nf">&quot;</span>
</span><span class='line'><span class="nf">    </span><span class="k">Then </span><span class="nf">the mark should be &quot;</span><span class="nv">&lt;mark&gt;</span><span class="nf">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nf">  </span><span class="k">Scenarios:</span><span class="nf"> all numbers correct</span><span class="k"></span>
</span><span class='line'><span class="k">    |</span><span class="nv"> code</span><span class="k"> |</span><span class="nv"> guess</span><span class="k"> |</span><span class="nv"> mark</span><span class="k"> |</span><span class="nf"></span>
</span><span class='line'><span class="k">    |</span><span class="s"> 1234</span><span class="k"> |</span><span class="s"> 1234</span><span class="k">  |</span><span class="s"> ++++</span><span class="k"> |</span><span class="nf"></span>
</span><span class='line'><span class="k">    |</span><span class="s"> 1234</span><span class="k"> |</span><span class="s"> 1243</span><span class="k">  |</span><span class="s"> ++--</span><span class="k"> |</span><span class="nf"></span>
</span><span class='line'><span class="k">    |</span><span class="s"> 1234</span><span class="k"> |</span><span class="s"> 1423</span><span class="k">  |</span><span class="s"> +---</span><span class="k"> |</span><span class="nf"></span>
</span><span class='line'><span class="k">    |</span><span class="s"> 1234</span><span class="k"> |</span><span class="s"> 4321</span><span class="k">  |</span><span class="s"> ----</span><span class="k"> | </span>
</span></code></pre></td></tr></table></div></figure>


<h3>Automating Features with Cucumber</h3>

<p>在<code>features</code>目录下创建<code>step_definitions</code>目录, 然后再里面添加一个<code>codebreaker_steps.rb</code>文件</p>

<p><strong> Step Definition Methods </strong></p>

<blockquote><ul>
<li><strong> Given() </strong> 给出背景条件(context)　　</li>
<li><strong> When() </strong> 执行动作　　</li>
<li><strong> Then() </strong> 校验结果　　</li>
<li><strong> And()与But() </strong> 与上一个Given(),When(),或Then()意义相同, 只为使整个描述看起来更近似自然语言.</li>
</ul>
</blockquote>

<h3>Describing Code with RSpec</h3>

<p>项目下创建<code>spec/codebreaker/</code>, 然后在里面添加<code>game_spec.rb</code><br/>
原则是每个source文件要对应一个spec文件</p>

<figure class='code'><figcaption><span>game_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">Codebreaker</span>
</span><span class='line'>  <span class="n">describe</span> <span class="no">Game</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">describe</span> <span class="s2">&quot;#start&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;sends a welcome message&quot;</span>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;prompts for the first guess&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>在<code>spec/codebreaker/</code>下添加一个<code>spec_helper.rb</code></p>

<figure class='code'><figcaption><span>spec_helper.rb`</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;codebreaker&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>it()方法如果不传入代码块, 会被当做pending的方法</p>

<p>可以用<code>double("xxx")</code>方法得到一个<a href="http://en.wikipedia.org/wiki/Test_double">test double(测试替身)</a><br/>
<code>double("xxx").as_null_object</code>会让替身只关心指定给它的被期待的消息, 而忽略其他消息</p>

<figure class='code'><figcaption><span>game_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">Codebreaker</span>
</span><span class='line'>  <span class="n">describe</span> <span class="no">Game</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">describe</span> <span class="s2">&quot;#start&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;sends a welcome message&quot;</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">output</span> <span class="o">=</span> <span class="n">double</span><span class="p">(</span><span class="s1">&#39;output&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">as_null_object</span>
</span><span class='line'>        <span class="n">game</span> <span class="o">=</span> <span class="no">Game</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">output</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">output</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span><span class="ss">:puts</span><span class="p">)</span><span class="o">.</span><span class="n">with</span><span class="p">(</span><span class="s1">&#39;Welcome to Codebreaker!&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">game</span><span class="o">.</span><span class="n">start</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;prompts for the first guess&quot;</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">output</span> <span class="o">=</span> <span class="n">double</span><span class="p">(</span><span class="s1">&#39;output&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">as_null_object</span>
</span><span class='line'>        <span class="n">game</span> <span class="o">=</span> <span class="no">Game</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">output</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">output</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span><span class="ss">:puts</span><span class="p">)</span><span class="o">.</span><span class="n">with</span><span class="p">(</span><span class="s1">&#39;Enter guess:&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">game</span><span class="o">.</span><span class="n">start</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong> before(:each) {} </strong><br/>
传入block里的内容在每个example的顶部执行<br/>
可用这个方法创建实例变量并赋值</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="vi">@output</span> <span class="o">=</span> <span class="n">double</span><span class="p">(</span><span class="s1">&#39;output&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">as_null_object</span>
</span><span class='line'>  <span class="vi">@game</span> <span class="o">=</span> <span class="no">Game</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@output</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong> let(:method) {} </strong><br/>
传入的symbol作为方法名, 传入的block被当做方法体</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">let</span><span class="p">(</span><span class="ss">:output</span><span class="p">)</span> <span class="p">{</span> <span class="n">double</span><span class="p">(</span><span class="s1">&#39;output&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">as_null_object</span> <span class="p">}</span>
</span><span class='line'><span class="n">let</span><span class="p">(</span><span class="ss">:game</span><span class="p">)</span> <span class="p">{</span> <span class="no">Game</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">output</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The RSpec Book笔记(一) 概述]]></title>
    <link href="http://blog.banban.me/blog/blog/2014/04/28/the-rspec-bookbi-ji-%5B%3F%5D/"/>
    <updated>2014-04-28T10:58:54+08:00</updated>
    <id>http://blog.banban.me/blog/blog/2014/04/28/the-rspec-bookbi-ji-[?]</id>
    <content type="html"><![CDATA[<p>其实这个坑经开了有些日子, 测试一直都是自己弱项.<br/>
最初在云清扬时就很少写, 后来开始搞爱豆网人力有限加之是摸索中需求不断变化的初创, 索性一行测试代码都没有.<br/>
现在在做对日外包, 日方那里直接要求的就是完全肉测然后上测试式样书, 更是用不着写测试.<br/>
适逢DHH大神前不久的<a href="http://david.heinemeierhansson.com/2014/tdd-is-dead-long-live-testing.html">TDD is dead. Long live testing.</a>, 引发关于测试的各种大讨论</p>

<p>但是无论大神观点如何, 毕竟自己只是一枚小小的程序猿, 而TDD作为一种很成熟开发方式, 在很多情况下依然会是行之有效的.<br/>
我一直信奉&#8221;存在即合理&#8221;这种观点.</p>

<p>碰巧这段时间开发进度不是很忙, 又快赶上5.1的三天假期, 应该可以把手头的<The RSpec Book>啃掉.<br/>
然后把chat_demo改以书中所倡导的BDD的方式改善下, 通过实践来加深理解.</p>

<h1>Part I Getting Started with RSpec and Cucumber</h1>

<h3>什么是TDD</h3>

<p>TDD(Test-Driven Development)这个词并不陌生, 曾经开发亲情网时整个team也煞有介事的有过一小段时间的BDD尝试.  <br/>
但是归根结底, TDD其重点应该落在Development上, 是一种包含需求分析,设计,测试,编码于一体的开发方法, 而并不仅仅是一种写Test的手段.</p>

<p>TDD要求我们在开发时先写出一个简单的测试, 这时运行测试一定是无法通过的, 因为还没开始编码; 然后编写最低限度的代码, 使测试通过.<br/>
一旦测试通过后, 需要重新审视我们的设计并重构代码去除冗余. 此时我们手头的代码, 毫无疑问地太过简单而无法处理全部需求.<br/>
相对于直接添加代码, 我们此时该做的是在测试里增加新的特性让测试失败, 然后再编写最低限度通过测试的代码, 回顾设计, 重构&hellip;<br/>
如此反复, 直到我们完成整个功能.</p>

<p>整个这个循环往复的过程, 又被称为红绿重构(red/green/refactor).</p>

<p>有些时候, 我们即是开发者又是测试者. 如果遇到这种情况, 把test与TDD的情境区分开依然是有帮助的: 作为TDDer时, 把注意力集中在红绿重构,设计,规范要求上; 而作为tester时, 则需要尽可能考诸如虑如何设置边界条件,如何发掘隐藏的bug等等.</p>

<h3>那么BDD又是什么</h3>

<p>我们测试一个对象内部结构的问题在于: 我们只是测试了这个对象是什么,而没有关心它可以做些什么. 而后者无疑远比前者更为重要.</p>

<p>BDD(Behaviour-Driven Development)则把目光着眼于行为(做什么)而非结构(是什么).<br/>
它将程序以更近似自然语言的方式, 描述为一个个场景(scenario): <strong> Given </strong> some context, <strong> When </strong> some event occurs,
<strong> Then </strong> I expect some outcome. 这样做可以大幅降低沟通成本.</p>

<p>通过Given, When, Then三位一体的方式, 可以很容易的描述出程序的行为以及对象的行为. 并且这种描述, 分析人员,测试人员,卡发人员都能很好地理解.</p>

<h3>BDD需要些什么</h3>

<figure class='code'><figcaption><span>RSpec</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rspec</span> <span class="o">[</span><span class="n">options</span><span class="o">]</span> <span class="o">[</span><span class="n">files</span> <span class="ow">or</span> <span class="n">directories</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>cucumber</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cucumber</span> <span class="o">[</span><span class="n">options</span><span class="o">]</span> <span class="o">[</span> <span class="o">[</span><span class="no">FILE</span><span class="o">|</span><span class="no">DIR</span><span class="o">|</span><span class="no">URL</span><span class="o">][</span><span class="ss">:LINE</span><span class="o">[</span><span class="ss">:LINE</span><span class="o">]*]</span> <span class="o">]+</span>
</span></code></pre></td></tr></table></div></figure>


<p>在rails项目里添加RSpec和cucumber</p>

<figure class='code'><figcaption><span>添加进Gemfile  </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:development</span><span class="p">,</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;rspec&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;rspec-rails&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;cucumber&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;cucumber-rails&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;database_cleaner&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;webrat&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;selenium-client&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行<code>script/rails generate rspec:install</code><br/>
会在项目跟目录下生成 <code>spec/spec_helper.rb</code> 与 <code>.rspec</code> <br/>
<code>.rspec</code>文件为RSpec的配置文件, 可以放在项目根目录下, 或放在主目录/home/xxx/下</p>

<figure class='code'><figcaption><span>.rspec</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>--color
</span><span class='line'>--format doc
</span><span class='line'>--backtrace
</span></code></pre></td></tr></table></div></figure>


<h1>Part II Behaviour-Driven Development</h1>

<h3>The Principles of BDD</h3>

<blockquote><p><strong> Enough is enough </strong> 过犹不及, 计划/分析/设计仅仅足够开始即可<br/>
<strong> Deliver stakeholder value </strong> 不做不产生价值的事
<strong> It’s all behavior </strong> RSpec描述程序行为, cucumber描述用户行为</p></blockquote>

<h3>What’s in a Story?</h3>

<p><strong> A title </strong><br/>
我们可以通过title知道我们在讨论哪个故事</p>

<p><strong> A narrative </strong><br/>
可以采用三段式的故事描述:</p>

<blockquote><p>as a [stakeholder],<br/>
I want [feature]<br/>
so that [benefit].</p></blockquote>

<p>或者:</p>

<blockquote><p>in order to [benefit],　　
a [stakeholder]<br/>
wants to [feature].</p></blockquote>

<p>更突出行为的目的角度看, 后者更佳</p>

<p><strong> Acceptance criteria </strong><br/>
据此评判我们何时算是干完了<br/>
acceptance criteria包含一系列由独立steps组成的scenarios</p>
]]></content>
  </entry>
  
</feed>
